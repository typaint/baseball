{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "2c04bdf8",
   "metadata": {},
   "source": [
    "a) Attached you will find a csv file (Q2_pitches_train.csv) containing a subset of pitch-level data from an MLB season. Refer to the next page for descriptions of each column. Using the data, develop a model that predicts the probability that a pitch is one of the below pitch types:\n",
    "<br>\n",
    "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    a. 4-Seam Fastball\n",
    "    <br>\n",
    "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    b. 2-Seam Fastball\n",
    "    <br>\n",
    "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    c. Curveball\n",
    "    <br>\n",
    "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    d. Slider\n",
    "    <br>\n",
    "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    e. Changeup\n",
    "    <br>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77264959",
   "metadata": {},
   "source": [
    "# Import Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 588,
   "id": "dd72cd4d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "df = pd.read_csv(\"Q2_pitches_train.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 589,
   "id": "45cfa389",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>inning</th>\n",
       "      <th>is_bottom</th>\n",
       "      <th>balls</th>\n",
       "      <th>strikes</th>\n",
       "      <th>outs_before</th>\n",
       "      <th>is_lhp</th>\n",
       "      <th>is_lhb</th>\n",
       "      <th>pitch_type</th>\n",
       "      <th>bat_score_before</th>\n",
       "      <th>field_score</th>\n",
       "      <th>basecode_before</th>\n",
       "      <th>batterid</th>\n",
       "      <th>pitcherid</th>\n",
       "      <th>cid</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>FF</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>347</td>\n",
       "      <td>1304</td>\n",
       "      <td>2014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>FF</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>269</td>\n",
       "      <td>1661</td>\n",
       "      <td>2052</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>FT</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>43</td>\n",
       "      <td>1048</td>\n",
       "      <td>2029</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>FF</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>98</td>\n",
       "      <td>1521</td>\n",
       "      <td>2049</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>SL</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>460</td>\n",
       "      <td>1100</td>\n",
       "      <td>2050</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   inning  is_bottom  balls  strikes  outs_before  is_lhp  is_lhb pitch_type  \\\n",
       "0       3          0      1        0            1       0       1         FF   \n",
       "1       1          0      2        2            2       1       0         FF   \n",
       "2       2          1      0        0            0       0       0         FT   \n",
       "3       7          0      0        0            1       0       0         FF   \n",
       "4       7          1      0        0            2       1       1         SL   \n",
       "\n",
       "   bat_score_before  field_score  basecode_before  batterid  pitcherid   cid  \n",
       "0                 0            1                0       347       1304  2014  \n",
       "1                 0            0                0       269       1661  2052  \n",
       "2                 0            0                0        43       1048  2029  \n",
       "3                 5            1                1        98       1521  2049  \n",
       "4                 6            1                1       460       1100  2050  "
      ]
     },
     "execution_count": 589,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 590,
   "id": "e6373fba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(480915, 14)"
      ]
     },
     "execution_count": 590,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2250feb3",
   "metadata": {},
   "source": [
    "# EDA "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44dbe263",
   "metadata": {},
   "source": [
    "Look at number of pitcher throw by each pitcher"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 591,
   "id": "c79e710e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "count     830.000000\n",
      "mean      579.415663\n",
      "std       565.653548\n",
      "min         1.000000\n",
      "25%       150.250000\n",
      "50%       415.000000\n",
      "75%       779.000000\n",
      "max      2517.000000\n",
      "dtype: float64\n",
      "(array([300., 174., 139.,  71.,  32.,  32.,  27.,  21.,  28.,   6.]), array([1.0000e+00, 2.5260e+02, 5.0420e+02, 7.5580e+02, 1.0074e+03,\n",
      "       1.2590e+03, 1.5106e+03, 1.7622e+03, 2.0138e+03, 2.2654e+03,\n",
      "       2.5170e+03]), <BarContainer object of 10 artists>)\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "print(df.groupby('pitcherid').size().describe())\n",
    "print(plt.hist(df.groupby('pitcherid').size()))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "41b0091c",
   "metadata": {},
   "source": [
    "Look at distribution of pitches thrown"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 592,
   "id": "25e17a0e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['FF', 'SL', 'FT', 'CH', 'CB'], dtype='object')"
      ]
     },
     "execution_count": 592,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.pitch_type.value_counts().index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 593,
   "id": "713b76de",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'pitch type')"
      ]
     },
     "execution_count": 593,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.bar(df.pitch_type.value_counts().index, df.pitch_type.value_counts().values)\n",
    "plt.ylabel(\"# of pitches\")\n",
    "plt.xlabel(\"pitch type\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "386c73f9",
   "metadata": {},
   "source": [
    "Unbalanced data will need some resampling technique to baalance out pitch types. I will use the SMOTE technique to balance the output data. This is done to prevent the model from just predicting 4-seam fastball every pitch."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a40f6c4f",
   "metadata": {},
   "source": [
    "## Balance Data (SMOTE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 594,
   "id": "6505ae3c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['inning', 'is_bottom', 'balls', 'strikes', 'outs_before', 'is_lhp',\n",
       "       'is_lhb', 'pitch_type', 'bat_score_before', 'field_score',\n",
       "       'basecode_before', 'batterid', 'pitcherid', 'cid'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 594,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 595,
   "id": "8f99d783",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/TyPainter1/opt/anaconda3/lib/python3.8/site-packages/imblearn/utils/_validation.py:587: FutureWarning: Pass sampling_strategy={'FF': 100000} as keyword args. From version 0.9 passing these as positional arguments will result in an error\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "from imblearn.over_sampling import SMOTE\n",
    "from imblearn.under_sampling import RandomUnderSampler\n",
    "from imblearn.pipeline import Pipeline\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "# transform the dataset\n",
    "# over = SMOTE(sampling_strategy=0.1) # oversample minority class to be 10% majority\n",
    "# under = RandomUnderSampler(sampling_strategy=0.5) # undersample majority to be 50% more than minority\n",
    "# steps = [('o', over), ('u', under)]\n",
    "# pipeline = Pipeline(steps=steps)\n",
    "\n",
    "inputs = df.loc[:,df.columns != 'pitch_type']\n",
    "output = df.pitch_type\n",
    "\n",
    "# label encode the target variable\n",
    "#output = LabelEncoder().fit_transform(output)\n",
    "# transform the dataset\n",
    "min_strategy = {\"FT\":100000, \"CB\":100000, \"SL\":100000, \"CH\":100000}\n",
    "oversample = SMOTE(sampling_strategy=min_strategy)\n",
    "maj_strategy = {\"FF\":100000}\n",
    "undersample = RandomUnderSampler(maj_strategy)\n",
    "steps = [('o', oversample), ('u', undersample)]\n",
    "pipeline = Pipeline(steps=steps)\n",
    "\n",
    "inputs, output = pipeline.fit_resample(inputs, output)\n",
    "#inputs, output = oversample.fit_resample(inputs, output)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 596,
   "id": "f03334db",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'pitch type')"
      ]
     },
     "execution_count": 596,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZgAAAEGCAYAAABYV4NmAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAAAW2klEQVR4nO3df7DddX3n8edriSLogvwIiAQalJQWmNVKFlFbpzVWsi0jdBdqnFKi4qZDser+qBNoZ+n+YAbaDrY4K1tGhYhUQLQL1voDQ2mrpWBoUQzIEsVCFgpBWKSt/Ai+94/zuePJ5ebmhtzPObn3Ph8zZ873vL/fz/d8PslMXvl8v9/z/aaqkCRptv2LcXdAkjQ/GTCSpC4MGElSFwaMJKkLA0aS1MWicXdgd3HggQfW0qVLx90NSZpTbrvttkeqavFU6wyYZunSpWzYsGHc3ZCkOSXJ329vnYfIJEldGDCSpC4MGElSFwaMJKkLA0aS1IUBI0nqolvAJPlYkoeTfHOotn+SG5Lc0973G1p3TpJNSe5OcuJQ/bgkd7R1FydJq++Z5OpWvyXJ0qE2q9t33JNkda8xSpK2r+cM5nJg5aTaWmB9VS0D1rfPJDkaWAUc09p8OMkerc0lwBpgWXtN7PNM4LGqOhL4IHBh29f+wHnAa4HjgfOGg0ySNBrdAqaq/hJ4dFL5ZGBdW14HnDJUv6qqnqqqe4FNwPFJDgH2qaqba/Dgmo9PajOxr2uBFW12cyJwQ1U9WlWPATfw3KCTJHU26l/yH1xVDwJU1YNJDmr1Q4G/Gdpuc6s905Yn1yfa3N/2tTXJ48ABw/Up2mwjyRoGsyMOP/zw5z8qYOnaz+1S+93Fdy/4xZ1uM1/GDjs//oU8dljY41/IY5+p3eUkf6ao1TT159tm22LVpVW1vKqWL1485a10JEnP06gD5qF22Iv2/nCrbwYOG9puCfBAqy+Zor5NmySLgH0ZHJLb3r4kSSM06oC5Hpi4qms1cN1QfVW7MuwIBifzb22H055IckI7v3LGpDYT+zoVuLGdp/ki8JYk+7WT+29pNUnSCHU7B5Pkk8DPAgcm2czgyq4LgGuSnAncB5wGUFUbk1wD3AlsBc6uqmfbrs5icEXaXsDn2wvgo8AVSTYxmLmsavt6NMl/B77WtvtvVTX5YgNJUmfdAqaq3r6dVSu2s/35wPlT1DcAx05Rf5IWUFOs+xjwsRl3VpI063aXk/ySpHnGgJEkdWHASJK6MGAkSV0YMJKkLgwYSVIXBowkqQsDRpLUhQEjSerCgJEkdWHASJK6MGAkSV0YMJKkLgwYSVIXBowkqQsDRpLUhQEjSerCgJEkdWHASJK6MGAkSV0YMJKkLgwYSVIXBowkqQsDRpLUhQEjSerCgJEkdWHASJK6MGAkSV0YMJKkLgwYSVIXBowkqQsDRpLUxVgCJsl/SLIxyTeTfDLJi5Lsn+SGJPe09/2Gtj8nyaYkdyc5cah+XJI72rqLk6TV90xydavfkmTpGIYpSQvayAMmyaHAe4HlVXUssAewClgLrK+qZcD69pkkR7f1xwArgQ8n2aPt7hJgDbCsvVa2+pnAY1V1JPBB4MIRDE2SNGRch8gWAXslWQTsDTwAnAysa+vXAae05ZOBq6rqqaq6F9gEHJ/kEGCfqrq5qgr4+KQ2E/u6FlgxMbuRJI3GyAOmqv4v8PvAfcCDwONV9SXg4Kp6sG3zIHBQa3IocP/QLja32qFteXJ9mzZVtRV4HDhgcl+SrEmyIcmGLVu2zM4AJUnAeA6R7cdghnEE8HLgxUlOn67JFLWapj5dm20LVZdW1fKqWr548eLpOy5J2injOET2ZuDeqtpSVc8AnwFeDzzUDnvR3h9u228GDhtqv4TBIbXNbXlyfZs27TDcvsCjXUYjSZrSOALmPuCEJHu38yIrgLuA64HVbZvVwHVt+XpgVbsy7AgGJ/NvbYfRnkhyQtvPGZPaTOzrVODGdp5GkjQii0b9hVV1S5Jrgb8FtgJ/B1wKvAS4JsmZDELotLb9xiTXAHe27c+uqmfb7s4CLgf2Aj7fXgAfBa5IsonBzGXVCIYmSRoy8oABqKrzgPMmlZ9iMJuZavvzgfOnqG8Ajp2i/iQtoCRJ4+Ev+SVJXRgwkqQuDBhJUhcGjCSpCwNGktSFASNJ6sKAkSR1YcBIkrowYCRJXRgwkqQuDBhJUhcGjCSpCwNGktSFASNJ6sKAkSR1YcBIkrowYCRJXRgwkqQuDBhJUhcGjCSpCwNGktSFASNJ6sKAkSR1scOASfK7SfZJ8oIk65M8kuT0UXROkjR3zWQG85aq+j5wErAZ+HHgN7v2SpI0580kYF7Q3n8B+GRVPdqxP5KkeWLRDLb5bJJvAT8Afj3JYuDJvt2SJM11O5zBVNVa4HXA8qp6Bvhn4OTeHZMkzW0zOcm/N3A2cEkrvRxY3rNTkqS5bybnYC4DngZe3z5vBv5Htx5JkuaFmQTMK6vqd4FnAKrqB0C69kqSNOfNJGCeTrIXUABJXgk81bVXkqQ5byYBcx7wBeCwJFcC64EP7MqXJnlpkmuTfCvJXUlel2T/JDckuae97ze0/TlJNiW5O8mJQ/XjktzR1l2cJK2+Z5KrW/2WJEt3pb+SpJ03k6vIbgD+LfAO4JMMria7aRe/9w+BL1TVTwCvAu4C1gLrq2oZgxBbC5DkaGAVcAywEvhwkj3afi4B1gDL2mtlq58JPFZVRwIfBC7cxf5KknbSTO9F9iLgMeD7wNFJ3vh8vzDJPsAbgY8CVNXTVfX/GFz6vK5ttg44pS2fDFxVVU9V1b3AJuD4JIcA+1TVzVVVwMcntZnY17XAionZjSRpNHb4Q8skFwJvAzYCP2zlAv7yeX7nK4AtwGVJXgXcBrwPOLiqHgSoqgeTHNS2PxT4m6H2m1vtmbY8uT7R5v62r61JHgcOAB55nn2WJO2kmfyS/xTgqKqarRP7i4DXAL9RVbck+UPa4bDtmGrmUdPUp2uz7Y6TNQwOsXH44YdP12dJ0k6aySGy7/Cj+5HNhs3A5qq6pX2+lkHgPNQOe9HeHx7a/rCh9kuAB1p9yRT1bdokWQTsCzznHmpVdWlVLa+q5YsXL56FoUmSJmx3BpPkQwz+1//PwO1J1jN0eXJVvff5fGFV/UOS+5McVVV3AyuAO9trNXBBe7+uNbke+OMkFzG4i8Ay4NaqejbJE0lOAG4BzgA+NNRmNXAzcCpwYztPI0kakekOkW1o77cx+Ad7Nv0GcGWSFzKYIb2TwWzqmiRnAvcBpwFU1cYk1zAIoK3A2VX1bNvPWcDlwF7A59sLBhcQXJFkE4OZy6pZ7r8kaQe2GzBVtQ4gyYuBJyf+UW+XCO+5K19aVbcz9f3MVmxn+/OB86eobwCOnaL+JC2gJEnjMZNzMOsZzBAm7AV8uU93JEnzxUwC5kVV9Y8TH9ry3v26JEmaD2YSMP+U5DUTH5Icx+DhY5IkbddMfgfzfuBTSSYuAT4ET5pLknZgJgHzDeAngKMY/IDxW8z8FjOSpAVqJkFxc1U9U1XfrKo72mOTb+7dMUnS3DbdDy1fxuCeXnsl+Sl+dPuVffAkvyRpB6Y7RHYig1v0LwEuGqo/AZzbsU+SpHlgRz+0XJfk31XVp0fYJ0nSPDDdIbLTq+oTwNIk/3Hy+qq6aIpmkiQB0x8ie3F7f8koOiJJml+mO0T2R+39v46uO5Kk+WKHlykneUWSzybZkuThJNclecUoOidJmrtm8juYPwauYfAL/pcDnwI+2bNTkqS5byYBk6q6oqq2ttcnmOLxw5IkDZvJrWL+PMla4CoGwfI24HNJ9geoquc8iliSpJkEzNva+69Nqr+LQeB4PkaS9Bw7DJiqOmIUHZEkzS/eFVmS1IUBI0nqYrsBk+QN7X3P0XVHkjRfTDeDubi9++wXSdJOm+4k/zNJLgMOTXLx5JVV9d5+3ZIkzXXTBcxJwJuBNwG3jaY7kqT5YrqbXT4CXJXkrqr6+gj7JEmaB2ZyFdn3kvxJu9HlQ0k+nWRJ955Jkua0mQTMZcD1DG50eSjw2VaTJGm7ZhIwB1XVZUM3u7wcWNy5X5KkOW4mAbMlyelJ9miv04Hv9e6YJGlum0nAvAv4ZeAfgAeBU1tNkqTtmsnNLu8D3jqCvkiS5hHvRSZJ6sKAkSR1MbaAaRcM/F2SP22f909yQ5J72vt+Q9uek2RTkruTnDhUPy7JHW3dxUnS6nsmubrVb0mydOQDlKQFbocBk+S3h5Zn887K7wPuGvq8FlhfVcuA9e0zSY4GVgHHACuBDyfZo7W5BFgDLGuvla1+JvBYVR0JfBC4cBb7LUmagelu1/+BJK9jcNXYhFm5s3K7E8AvAh8ZKp8MrGvL64BThupXVdVTVXUvsAk4PskhwD5VdXNVFfDxSW0m9nUtsGJidiNJGo3pZjB3A6cBr0jyV0kuBQ5IctQsfO8fAB8AfjhUO7iqHgRo7we1+qHA/UPbbW61Q9vy5Po2bapqK/A4cMDkTiRZk2RDkg1btmzZxSFJkoZNFzCPAecymDH8LD96PszaJH/9fL8wyUnAw1U10zs0TzXzqGnq07XZtlB1aVUtr6rlixd7cwJJmk3T/Q5mJXAe8ErgIuDrwD9V1Tt38TvfALw1yS8ALwL2SfIJ4KEkh1TVg+3w18Nt+83AYUPtlwAPtPqSKerDbTYnWQTsCzy6i/2WJO2E7c5gqurcqloBfBf4BIMwWpzkK0k++3y/sKrOqaolVbWUwcn7G6vqdAY31FzdNlsNXNeWrwdWtSvDjmBwMv/WdhjtiSQntPMrZ0xqM7GvU9t3PGcGI0nqZ4e/5Ae+WFVfA76W5Kyq+ukkB3boywXANUnOBO5jcP6HqtqY5BrgTmArcHZVPdvanAVcDuwFfL69AD4KXJFkE4OZy6oO/ZUkTWMmt4r5wNDHd7TaI7Px5VV1E3BTW/4esGI7250PnD9FfQNw7BT1J2kBJUkaj536oaVPtpQkzZS3ipEkdWHASJK6MGAkSV0YMJKkLgwYSVIXBowkqQsDRpLUhQEjSerCgJEkdWHASJK6MGAkSV0YMJKkLgwYSVIXBowkqQsDRpLUhQEjSerCgJEkdWHASJK6MGAkSV0YMJKkLgwYSVIXBowkqQsDRpLUhQEjSerCgJEkdWHASJK6MGAkSV0YMJKkLgwYSVIXBowkqQsDRpLUxcgDJslhSf48yV1JNiZ5X6vvn+SGJPe09/2G2pyTZFOSu5OcOFQ/Lskdbd3FSdLqeya5utVvSbJ01OOUpIVuHDOYrcB/qqqfBE4Azk5yNLAWWF9Vy4D17TNt3SrgGGAl8OEke7R9XQKsAZa118pWPxN4rKqOBD4IXDiKgUmSfmTkAVNVD1bV37blJ4C7gEOBk4F1bbN1wClt+WTgqqp6qqruBTYBxyc5BNinqm6uqgI+PqnNxL6uBVZMzG4kSaMx1nMw7dDVTwG3AAdX1YMwCCHgoLbZocD9Q802t9qhbXlyfZs2VbUVeBw4YIrvX5NkQ5INW7ZsmaVRSZJgjAGT5CXAp4H3V9X3p9t0ilpNU5+uzbaFqkuranlVLV+8ePGOuixJ2gljCZgkL2AQLldW1Wda+aF22Iv2/nCrbwYOG2q+BHig1ZdMUd+mTZJFwL7Ao7M/EknS9ozjKrIAHwXuqqqLhlZdD6xuy6uB64bqq9qVYUcwOJl/azuM9kSSE9o+z5jUZmJfpwI3tvM0kqQRWTSG73wD8KvAHUlub7VzgQuAa5KcCdwHnAZQVRuTXAPcyeAKtLOr6tnW7izgcmAv4PPtBYMAuyLJJgYzl1WdxyRJmmTkAVNVX2HqcyQAK7bT5nzg/CnqG4Bjp6g/SQsoSdJ4+Et+SVIXBowkqQsDRpLUhQEjSerCgJEkdWHASJK6MGAkSV0YMJKkLgwYSVIXBowkqQsDRpLUhQEjSerCgJEkdWHASJK6MGAkSV0YMJKkLgwYSVIXBowkqQsDRpLUhQEjSerCgJEkdWHASJK6MGAkSV0YMJKkLgwYSVIXBowkqQsDRpLUhQEjSerCgJEkdWHASJK6MGAkSV0YMJKkLgwYSVIX8zpgkqxMcneSTUnWjrs/krSQzNuASbIH8D+BfwMcDbw9ydHj7ZUkLRzzNmCA44FNVfWdqnoauAo4ecx9kqQFI1U17j50keRUYGVVvbt9/lXgtVX1nqFt1gBr2sejgLtH3tGdcyDwyLg7MSYLeeywsMe/kMcOu//4f6yqFk+1YtGoezJCmaK2TZpW1aXApaPpzq5LsqGqlo+7H+OwkMcOC3v8C3nsMLfHP58PkW0GDhv6vAR4YEx9kaQFZz4HzNeAZUmOSPJCYBVw/Zj7JEkLxrw9RFZVW5O8B/gisAfwsaraOOZu7ao5czivg4U8dljY41/IY4c5PP55e5JfkjRe8/kQmSRpjAwYSVIXBsxuKsnLklyV5NtJ7kzyZ0l+PMkPktye5OtJ/jrJUePu62ybZuzfnLTd7yT5z+PqZy9Jnm1/xxOvpUl+NsnjQ7Uvj7ufPUwx9ncOLT+d5I62fMG4+9pDkt9KsjHJN9o4X5vkpiRz8jLleXuSfy5LEuBPgHVVtarVXg0cDHy7ql7dar8GnAusHk9PZ98Oxr5Q/GDi73hCkqXAX1XVSWPp0eg8Z+zAZQBJvgv8XFXtzj86fN6SvA44CXhNVT2V5EDghWPu1i4xYHZPPwc8U1X/a6JQVbe3f2SG7QM8NsqOjcBMxy7NN4cAj1TVUwATQTr4P9fcZMDsno4FbtvOulcmuR34l8DewGtH1akRmcnYJ7wM+P3uPRq9vYbGeW9V/VJb/pmh+qeq6vyR96y/7Y19IfgS8F+S/B/gy8DVVfUXY+7TLjFg5p7hQ2RvY3CN/Mqx9mh0vj18+CTJ74yvK11NdZgIFu4hsgWhqv4xyXHAzzCYyV891x8zYsDsnjYCp85gu+tpx6fnkZmOXZp3qupZ4CbgpiR3MMfPr3oV2e7pRmDPJP9+opDkXwM/Nmm7nwa+PcqOjcBMxy7NK0mOSrJsqPRq4O/H1J1Z4QxmN1RVleSXgD9oU+Qnge8C7+dH5yECPA28e0zd7GIHY5fms5cAH0ryUmArsInB40SuBT6X5Jm23c1Vddp4urhzvFWMJKkLD5FJkrowYCRJXRgwkqQuDBhJUhcGjCSpCwNG6ijJR5Ic3ZbPncH2lyeZ9oemSV6a5Ndnq49SLwaM1FFVvbuq7mwfdxgwM/RSwIDRbs+AkXZRe17Lt5Ksa8/xuDbJ3m3dTUmWt+eX7NWe8XFlW3dG2/7rSa4Y2uUb27N+vrOd2cwFtB/cJvm9JFckOXmoP1cmeWuSdyS5LskXktyd5LyhbU5Pcmvbxx8l2aPPn44WMgNGmh1HAZdW1b8Cvs+kGUZVraXdyLGqfiXJMcBvAW+qqlcB7xva/BAGtwE6iUGYTLaWduPPqvpN4CPAOwGS7Au8Hviztu3xwK8wuO3IaS3sfhJ4G/CGdmPJZ9s20qwyYKTZcX9VfbUtf4JBQEznTcC1E8/8qKpHh9b976r6YTu0tsMHrbVbuh+Z5CDg7cCnq2prW31DVX2vqn4AfKb1awVwHPC1dtuhFcArZjJIaWd4LzJpdky+59KO7sGUabZ5atJ2M3EFg1nIKuBdO+hXGDwx9JwZ7lt6XpzBSLPj8PbIWxjMIr4yxTbPJHlBW14P/HKSAwCS7L8T3/UEgwfODbucdkPQqto4VP/5JPsn2Qs4Bfhq++5T24yHtt67VWvWGTDS7LgLWJ3kG8D+wCVTbHMp8I0kV7YQOB/4iyRfBy6a6RdV1feAryb5ZpLfa7WHWh8mPx/oKwxmN7czOHS2oR16+23gS62/NzA47yPNKu+mLO2iJEuBP62qY8fYh72BO4DXVNXjrfYOYHlVvWdc/dLC5gxGmuOSvBn4FvChiXCRdgfOYCRJXTiDkSR1YcBIkrowYCRJXRgwkqQuDBhJUhf/H80VrQYAbDRwAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.bar(np.unique(output, return_counts=True)[0], np.unique(output, return_counts=True)[1])\n",
    "plt.ylabel(\"# of pitches\")\n",
    "plt.xlabel(\"pitch type\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1e3564c",
   "metadata": {},
   "source": [
    "When I oversampled the minority classes (FT, CB, SL, CH) I made sure that over 50% of the data was still the original data and not the synthesized samples. I did the same for the majority class (FF) when I undersampled."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 597,
   "id": "8f38f553",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "count     830.000000\n",
      "mean      602.409639\n",
      "std       611.469839\n",
      "min         6.000000\n",
      "25%       153.000000\n",
      "50%       409.500000\n",
      "75%       797.000000\n",
      "max      3290.000000\n",
      "dtype: float64\n",
      "(array([363., 205., 109.,  37.,  40.,  35.,  18.,  17.,   4.,   2.]), array([   6. ,  334.4,  662.8,  991.2, 1319.6, 1648. , 1976.4, 2304.8,\n",
      "       2633.2, 2961.6, 3290. ]), <BarContainer object of 10 artists>)\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(inputs.groupby('pitcherid').size().describe())\n",
    "print(plt.hist(inputs.groupby('pitcherid').size()))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "129158b7",
   "metadata": {},
   "source": [
    "## Feature Engineering"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16747a40",
   "metadata": {},
   "source": [
    "I would like to caclulate some pitcher tendencies based on the count, especially with 2 strikes. To avoid diluting the count data, I will generalize the count variable to ahead, behind, even, and first pitch. I will also create a variable for 2 strikes. Then I will group pitcher id and these variables together to get tendency statistics to pass into the model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 598,
   "id": "cb66cc0b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>inning</th>\n",
       "      <th>is_bottom</th>\n",
       "      <th>balls</th>\n",
       "      <th>strikes</th>\n",
       "      <th>outs_before</th>\n",
       "      <th>is_lhp</th>\n",
       "      <th>is_lhb</th>\n",
       "      <th>bat_score_before</th>\n",
       "      <th>field_score</th>\n",
       "      <th>basecode_before</th>\n",
       "      <th>batterid</th>\n",
       "      <th>pitcherid</th>\n",
       "      <th>cid</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>115</td>\n",
       "      <td>1150</td>\n",
       "      <td>2034</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>34</td>\n",
       "      <td>1368</td>\n",
       "      <td>2075</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>203</td>\n",
       "      <td>1153</td>\n",
       "      <td>2024</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>356</td>\n",
       "      <td>1172</td>\n",
       "      <td>2094</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>296</td>\n",
       "      <td>1161</td>\n",
       "      <td>2032</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   inning  is_bottom  balls  strikes  outs_before  is_lhp  is_lhb  \\\n",
       "0       5          1      1        1            1       1       1   \n",
       "1       1          1      1        2            0       1       1   \n",
       "2      12          1      1        2            1       0       1   \n",
       "3       6          0      0        2            0       0       1   \n",
       "4       8          0      0        1            1       0       1   \n",
       "\n",
       "   bat_score_before  field_score  basecode_before  batterid  pitcherid   cid  \n",
       "0                 4            1                4       115       1150  2034  \n",
       "1                 0            0                0        34       1368  2075  \n",
       "2                 2            2                0       203       1153  2024  \n",
       "3                 0            0                0       356       1172  2094  \n",
       "4                 1            2                5       296       1161  2032  "
      ]
     },
     "execution_count": 598,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "inputs.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 599,
   "id": "bf2548a7",
   "metadata": {},
   "outputs": [],
   "source": [
    "p_count = []\n",
    "for i in range(len(inputs)):\n",
    "    if ((inputs.balls[i]==0) & (inputs.strikes[i]==0)):\n",
    "        p_count.append(\"first_pitch\")\n",
    "    elif inputs.balls[i] > inputs.strikes[i]:\n",
    "        p_count.append(\"behind\")\n",
    "    elif inputs.balls[i] < inputs.strikes[i]:\n",
    "        p_count.append(\"ahead\")\n",
    "    elif inputs.balls[i] == inputs.strikes[i]:\n",
    "        p_count.append(\"even\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 600,
   "id": "242937ec",
   "metadata": {},
   "outputs": [],
   "source": [
    "p_2strike = []\n",
    "for i in range(len(inputs)):\n",
    "    if (inputs.strikes[i]==2):\n",
    "        p_2strike.append(\"yes\")\n",
    "    else: \n",
    "        p_2strike.append(\"no\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 601,
   "id": "a8a3c8fd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# # convert counts to dummy variables\n",
    "# p_count_dummy = pd.get_dummies(p_count, prefix=\"p\")\n",
    "# p_count_dummy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 602,
   "id": "31b9f11a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# p_2strike_dummy = pd.get_dummies(p_2strike, prefix=\"p_2strike\")\n",
    "# p_2strike_dummy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 603,
   "id": "20c74582",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>inning</th>\n",
       "      <th>is_bottom</th>\n",
       "      <th>outs_before</th>\n",
       "      <th>is_lhp</th>\n",
       "      <th>is_lhb</th>\n",
       "      <th>bat_score_before</th>\n",
       "      <th>field_score</th>\n",
       "      <th>basecode_before</th>\n",
       "      <th>batterid</th>\n",
       "      <th>pitcherid</th>\n",
       "      <th>cid</th>\n",
       "      <th>p_count</th>\n",
       "      <th>p_2strike</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>115</td>\n",
       "      <td>1150</td>\n",
       "      <td>2034</td>\n",
       "      <td>even</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>34</td>\n",
       "      <td>1368</td>\n",
       "      <td>2075</td>\n",
       "      <td>ahead</td>\n",
       "      <td>yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>203</td>\n",
       "      <td>1153</td>\n",
       "      <td>2024</td>\n",
       "      <td>ahead</td>\n",
       "      <td>yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>356</td>\n",
       "      <td>1172</td>\n",
       "      <td>2094</td>\n",
       "      <td>ahead</td>\n",
       "      <td>yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>296</td>\n",
       "      <td>1161</td>\n",
       "      <td>2032</td>\n",
       "      <td>ahead</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   inning  is_bottom  outs_before  is_lhp  is_lhb  bat_score_before  \\\n",
       "0       5          1            1       1       1                 4   \n",
       "1       1          1            0       1       1                 0   \n",
       "2      12          1            1       0       1                 2   \n",
       "3       6          0            0       0       1                 0   \n",
       "4       8          0            1       0       1                 1   \n",
       "\n",
       "   field_score  basecode_before  batterid  pitcherid   cid p_count p_2strike  \n",
       "0            1                4       115       1150  2034    even        no  \n",
       "1            0                0        34       1368  2075   ahead       yes  \n",
       "2            2                0       203       1153  2024   ahead       yes  \n",
       "3            0                0       356       1172  2094   ahead       yes  \n",
       "4            2                5       296       1161  2032   ahead        no  "
      ]
     },
     "execution_count": 603,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "inputs['p_count'] = p_count\n",
    "inputs = inputs.drop(columns={'balls', 'strikes'})\n",
    "inputs['p_2strike'] = p_2strike\n",
    "inputs.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "08a64d5a",
   "metadata": {},
   "source": [
    "Next, I wanted to create more generalized inputs for base runners. The main categories would if there is a runner in scoring position, double play possibility, both RISP and DP, or bases empty."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 604,
   "id": "df4493da",
   "metadata": {},
   "outputs": [],
   "source": [
    "base_runners = []\n",
    "dp_list = [1,3,5,7]\n",
    "for i in range(len(inputs)):\n",
    "    if ((inputs.basecode_before[i]>=2) & (inputs.basecode_before[i] in dp_list) & (inputs.outs_before[i]<2)):\n",
    "        base_runners.append(\"RISP_DP\")\n",
    "    elif (inputs.basecode_before[i]>=2):\n",
    "        base_runners.append(\"RISP\")\n",
    "    elif ((inputs.basecode_before[i] in dp_list) & (inputs.outs_before[i]<2)):\n",
    "        base_runners.append(\"DP\")\n",
    "    else:\n",
    "        base_runners.append(\"Other\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 605,
   "id": "11a54ffb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# base_runners_dummy = pd.get_dummies(base_runners, prefix=\"base_runners\")\n",
    "# base_runners_dummy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 606,
   "id": "3a658977",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>inning</th>\n",
       "      <th>is_bottom</th>\n",
       "      <th>outs_before</th>\n",
       "      <th>is_lhp</th>\n",
       "      <th>is_lhb</th>\n",
       "      <th>bat_score_before</th>\n",
       "      <th>field_score</th>\n",
       "      <th>batterid</th>\n",
       "      <th>pitcherid</th>\n",
       "      <th>cid</th>\n",
       "      <th>p_count</th>\n",
       "      <th>p_2strike</th>\n",
       "      <th>base_runners</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>115</td>\n",
       "      <td>1150</td>\n",
       "      <td>2034</td>\n",
       "      <td>even</td>\n",
       "      <td>no</td>\n",
       "      <td>RISP</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>34</td>\n",
       "      <td>1368</td>\n",
       "      <td>2075</td>\n",
       "      <td>ahead</td>\n",
       "      <td>yes</td>\n",
       "      <td>Other</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>203</td>\n",
       "      <td>1153</td>\n",
       "      <td>2024</td>\n",
       "      <td>ahead</td>\n",
       "      <td>yes</td>\n",
       "      <td>Other</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>356</td>\n",
       "      <td>1172</td>\n",
       "      <td>2094</td>\n",
       "      <td>ahead</td>\n",
       "      <td>yes</td>\n",
       "      <td>Other</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>296</td>\n",
       "      <td>1161</td>\n",
       "      <td>2032</td>\n",
       "      <td>ahead</td>\n",
       "      <td>no</td>\n",
       "      <td>RISP_DP</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   inning  is_bottom  outs_before  is_lhp  is_lhb  bat_score_before  \\\n",
       "0       5          1            1       1       1                 4   \n",
       "1       1          1            0       1       1                 0   \n",
       "2      12          1            1       0       1                 2   \n",
       "3       6          0            0       0       1                 0   \n",
       "4       8          0            1       0       1                 1   \n",
       "\n",
       "   field_score  batterid  pitcherid   cid p_count p_2strike base_runners  \n",
       "0            1       115       1150  2034    even        no         RISP  \n",
       "1            0        34       1368  2075   ahead       yes        Other  \n",
       "2            2       203       1153  2024   ahead       yes        Other  \n",
       "3            0       356       1172  2094   ahead       yes        Other  \n",
       "4            2       296       1161  2032   ahead        no      RISP_DP  "
      ]
     },
     "execution_count": 606,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "inputs['base_runners'] = base_runners\n",
    "inputs = inputs.drop(columns={'basecode_before'})\n",
    "inputs.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "92428933",
   "metadata": {},
   "source": [
    "After creating these feature I will group the new columns with pitcher ID and calculate pitcher tendencies based on these feature situations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 607,
   "id": "ea6ded0b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>inning</th>\n",
       "      <th>is_bottom</th>\n",
       "      <th>outs_before</th>\n",
       "      <th>is_lhp</th>\n",
       "      <th>is_lhb</th>\n",
       "      <th>bat_score_before</th>\n",
       "      <th>field_score</th>\n",
       "      <th>batterid</th>\n",
       "      <th>pitcherid</th>\n",
       "      <th>cid</th>\n",
       "      <th>p_count</th>\n",
       "      <th>p_2strike</th>\n",
       "      <th>base_runners</th>\n",
       "      <th>pitch_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>115</td>\n",
       "      <td>1150</td>\n",
       "      <td>2034</td>\n",
       "      <td>even</td>\n",
       "      <td>no</td>\n",
       "      <td>RISP</td>\n",
       "      <td>CB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>34</td>\n",
       "      <td>1368</td>\n",
       "      <td>2075</td>\n",
       "      <td>ahead</td>\n",
       "      <td>yes</td>\n",
       "      <td>Other</td>\n",
       "      <td>CB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>203</td>\n",
       "      <td>1153</td>\n",
       "      <td>2024</td>\n",
       "      <td>ahead</td>\n",
       "      <td>yes</td>\n",
       "      <td>Other</td>\n",
       "      <td>CB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>356</td>\n",
       "      <td>1172</td>\n",
       "      <td>2094</td>\n",
       "      <td>ahead</td>\n",
       "      <td>yes</td>\n",
       "      <td>Other</td>\n",
       "      <td>CB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>296</td>\n",
       "      <td>1161</td>\n",
       "      <td>2032</td>\n",
       "      <td>ahead</td>\n",
       "      <td>no</td>\n",
       "      <td>RISP_DP</td>\n",
       "      <td>CB</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   inning  is_bottom  outs_before  is_lhp  is_lhb  bat_score_before  \\\n",
       "0       5          1            1       1       1                 4   \n",
       "1       1          1            0       1       1                 0   \n",
       "2      12          1            1       0       1                 2   \n",
       "3       6          0            0       0       1                 0   \n",
       "4       8          0            1       0       1                 1   \n",
       "\n",
       "   field_score  batterid  pitcherid   cid p_count p_2strike base_runners  \\\n",
       "0            1       115       1150  2034    even        no         RISP   \n",
       "1            0        34       1368  2075   ahead       yes        Other   \n",
       "2            2       203       1153  2024   ahead       yes        Other   \n",
       "3            0       356       1172  2094   ahead       yes        Other   \n",
       "4            2       296       1161  2032   ahead        no      RISP_DP   \n",
       "\n",
       "  pitch_type  \n",
       "0         CB  \n",
       "1         CB  \n",
       "2         CB  \n",
       "3         CB  \n",
       "4         CB  "
      ]
     },
     "execution_count": 607,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2 = inputs\n",
    "df2['pitch_type'] = output\n",
    "df2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 608,
   "id": "8069f124",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>inning</th>\n",
       "      <th>is_bottom</th>\n",
       "      <th>outs_before</th>\n",
       "      <th>is_lhp</th>\n",
       "      <th>is_lhb</th>\n",
       "      <th>bat_score_before</th>\n",
       "      <th>field_score</th>\n",
       "      <th>batterid</th>\n",
       "      <th>pitcherid</th>\n",
       "      <th>cid</th>\n",
       "      <th>p_count</th>\n",
       "      <th>p_2strike</th>\n",
       "      <th>base_runners</th>\n",
       "      <th>pitch_type</th>\n",
       "      <th>situation_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>115</td>\n",
       "      <td>1150</td>\n",
       "      <td>2034</td>\n",
       "      <td>even</td>\n",
       "      <td>no</td>\n",
       "      <td>RISP</td>\n",
       "      <td>CB</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>34</td>\n",
       "      <td>1368</td>\n",
       "      <td>2075</td>\n",
       "      <td>ahead</td>\n",
       "      <td>yes</td>\n",
       "      <td>Other</td>\n",
       "      <td>CB</td>\n",
       "      <td>85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>203</td>\n",
       "      <td>1153</td>\n",
       "      <td>2024</td>\n",
       "      <td>ahead</td>\n",
       "      <td>yes</td>\n",
       "      <td>Other</td>\n",
       "      <td>CB</td>\n",
       "      <td>106</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>356</td>\n",
       "      <td>1172</td>\n",
       "      <td>2094</td>\n",
       "      <td>ahead</td>\n",
       "      <td>yes</td>\n",
       "      <td>Other</td>\n",
       "      <td>CB</td>\n",
       "      <td>249</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>296</td>\n",
       "      <td>1161</td>\n",
       "      <td>2032</td>\n",
       "      <td>ahead</td>\n",
       "      <td>no</td>\n",
       "      <td>RISP_DP</td>\n",
       "      <td>CB</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   inning  is_bottom  outs_before  is_lhp  is_lhb  bat_score_before  \\\n",
       "0       5          1            1       1       1                 4   \n",
       "1       1          1            0       1       1                 0   \n",
       "2      12          1            1       0       1                 2   \n",
       "3       6          0            0       0       1                 0   \n",
       "4       8          0            1       0       1                 1   \n",
       "\n",
       "   field_score  batterid  pitcherid   cid p_count p_2strike base_runners  \\\n",
       "0            1       115       1150  2034    even        no         RISP   \n",
       "1            0        34       1368  2075   ahead       yes        Other   \n",
       "2            2       203       1153  2024   ahead       yes        Other   \n",
       "3            0       356       1172  2094   ahead       yes        Other   \n",
       "4            2       296       1161  2032   ahead        no      RISP_DP   \n",
       "\n",
       "  pitch_type  situation_count  \n",
       "0         CB               37  \n",
       "1         CB               85  \n",
       "2         CB              106  \n",
       "3         CB              249  \n",
       "4         CB                6  "
      ]
     },
     "execution_count": 608,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2[\"situation_count\"] = df2.groupby(['pitcherid', 'p_count', 'p_2strike', 'base_runners'])['pitch_type'].transform(lambda x: x.count())\n",
    "df2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 609,
   "id": "436e5b60",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>inning</th>\n",
       "      <th>is_bottom</th>\n",
       "      <th>outs_before</th>\n",
       "      <th>is_lhp</th>\n",
       "      <th>is_lhb</th>\n",
       "      <th>bat_score_before</th>\n",
       "      <th>field_score</th>\n",
       "      <th>batterid</th>\n",
       "      <th>pitcherid</th>\n",
       "      <th>cid</th>\n",
       "      <th>p_count</th>\n",
       "      <th>p_2strike</th>\n",
       "      <th>base_runners</th>\n",
       "      <th>pitch_type</th>\n",
       "      <th>situation_count</th>\n",
       "      <th>pitch_type_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>115</td>\n",
       "      <td>1150</td>\n",
       "      <td>2034</td>\n",
       "      <td>even</td>\n",
       "      <td>no</td>\n",
       "      <td>RISP</td>\n",
       "      <td>CB</td>\n",
       "      <td>37</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>34</td>\n",
       "      <td>1368</td>\n",
       "      <td>2075</td>\n",
       "      <td>ahead</td>\n",
       "      <td>yes</td>\n",
       "      <td>Other</td>\n",
       "      <td>CB</td>\n",
       "      <td>85</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>203</td>\n",
       "      <td>1153</td>\n",
       "      <td>2024</td>\n",
       "      <td>ahead</td>\n",
       "      <td>yes</td>\n",
       "      <td>Other</td>\n",
       "      <td>CB</td>\n",
       "      <td>106</td>\n",
       "      <td>28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>356</td>\n",
       "      <td>1172</td>\n",
       "      <td>2094</td>\n",
       "      <td>ahead</td>\n",
       "      <td>yes</td>\n",
       "      <td>Other</td>\n",
       "      <td>CB</td>\n",
       "      <td>249</td>\n",
       "      <td>160</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>296</td>\n",
       "      <td>1161</td>\n",
       "      <td>2032</td>\n",
       "      <td>ahead</td>\n",
       "      <td>no</td>\n",
       "      <td>RISP_DP</td>\n",
       "      <td>CB</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   inning  is_bottom  outs_before  is_lhp  is_lhb  bat_score_before  \\\n",
       "0       5          1            1       1       1                 4   \n",
       "1       1          1            0       1       1                 0   \n",
       "2      12          1            1       0       1                 2   \n",
       "3       6          0            0       0       1                 0   \n",
       "4       8          0            1       0       1                 1   \n",
       "\n",
       "   field_score  batterid  pitcherid   cid p_count p_2strike base_runners  \\\n",
       "0            1       115       1150  2034    even        no         RISP   \n",
       "1            0        34       1368  2075   ahead       yes        Other   \n",
       "2            2       203       1153  2024   ahead       yes        Other   \n",
       "3            0       356       1172  2094   ahead       yes        Other   \n",
       "4            2       296       1161  2032   ahead        no      RISP_DP   \n",
       "\n",
       "  pitch_type  situation_count  pitch_type_count  \n",
       "0         CB               37                12  \n",
       "1         CB               85                30  \n",
       "2         CB              106                28  \n",
       "3         CB              249               160  \n",
       "4         CB                6                 2  "
      ]
     },
     "execution_count": 609,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2[\"pitch_type_count\"] = df2.groupby(['pitcherid', 'p_count', 'p_2strike', 'base_runners','pitch_type'])['cid'].transform(lambda x: x.count())\n",
    "df2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 610,
   "id": "a792cc1b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>inning</th>\n",
       "      <th>is_bottom</th>\n",
       "      <th>outs_before</th>\n",
       "      <th>is_lhp</th>\n",
       "      <th>is_lhb</th>\n",
       "      <th>bat_score_before</th>\n",
       "      <th>field_score</th>\n",
       "      <th>batterid</th>\n",
       "      <th>pitcherid</th>\n",
       "      <th>cid</th>\n",
       "      <th>p_count</th>\n",
       "      <th>p_2strike</th>\n",
       "      <th>base_runners</th>\n",
       "      <th>pitch_type</th>\n",
       "      <th>situation_count</th>\n",
       "      <th>pitch_type_count</th>\n",
       "      <th>sit_pitch_prob</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>115</td>\n",
       "      <td>1150</td>\n",
       "      <td>2034</td>\n",
       "      <td>even</td>\n",
       "      <td>no</td>\n",
       "      <td>RISP</td>\n",
       "      <td>CB</td>\n",
       "      <td>37</td>\n",
       "      <td>12</td>\n",
       "      <td>0.324324</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>34</td>\n",
       "      <td>1368</td>\n",
       "      <td>2075</td>\n",
       "      <td>ahead</td>\n",
       "      <td>yes</td>\n",
       "      <td>Other</td>\n",
       "      <td>CB</td>\n",
       "      <td>85</td>\n",
       "      <td>30</td>\n",
       "      <td>0.352941</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>203</td>\n",
       "      <td>1153</td>\n",
       "      <td>2024</td>\n",
       "      <td>ahead</td>\n",
       "      <td>yes</td>\n",
       "      <td>Other</td>\n",
       "      <td>CB</td>\n",
       "      <td>106</td>\n",
       "      <td>28</td>\n",
       "      <td>0.264151</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>356</td>\n",
       "      <td>1172</td>\n",
       "      <td>2094</td>\n",
       "      <td>ahead</td>\n",
       "      <td>yes</td>\n",
       "      <td>Other</td>\n",
       "      <td>CB</td>\n",
       "      <td>249</td>\n",
       "      <td>160</td>\n",
       "      <td>0.642570</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>296</td>\n",
       "      <td>1161</td>\n",
       "      <td>2032</td>\n",
       "      <td>ahead</td>\n",
       "      <td>no</td>\n",
       "      <td>RISP_DP</td>\n",
       "      <td>CB</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>0.333333</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   inning  is_bottom  outs_before  is_lhp  is_lhb  bat_score_before  \\\n",
       "0       5          1            1       1       1                 4   \n",
       "1       1          1            0       1       1                 0   \n",
       "2      12          1            1       0       1                 2   \n",
       "3       6          0            0       0       1                 0   \n",
       "4       8          0            1       0       1                 1   \n",
       "\n",
       "   field_score  batterid  pitcherid   cid p_count p_2strike base_runners  \\\n",
       "0            1       115       1150  2034    even        no         RISP   \n",
       "1            0        34       1368  2075   ahead       yes        Other   \n",
       "2            2       203       1153  2024   ahead       yes        Other   \n",
       "3            0       356       1172  2094   ahead       yes        Other   \n",
       "4            2       296       1161  2032   ahead        no      RISP_DP   \n",
       "\n",
       "  pitch_type  situation_count  pitch_type_count  sit_pitch_prob  \n",
       "0         CB               37                12        0.324324  \n",
       "1         CB               85                30        0.352941  \n",
       "2         CB              106                28        0.264151  \n",
       "3         CB              249               160        0.642570  \n",
       "4         CB                6                 2        0.333333  "
      ]
     },
     "execution_count": 610,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2[\"sit_pitch_prob\"] = df2.pitch_type_count/df2.situation_count\n",
    "df2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 611,
   "id": "2711712c",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pitcherid</th>\n",
       "      <th>p_count</th>\n",
       "      <th>p_2strike</th>\n",
       "      <th>base_runners</th>\n",
       "      <th>pitch_type</th>\n",
       "      <th>sit_pitch_prob</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>ahead</td>\n",
       "      <td>no</td>\n",
       "      <td>DP</td>\n",
       "      <td>FF</td>\n",
       "      <td>0.100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000</td>\n",
       "      <td>ahead</td>\n",
       "      <td>no</td>\n",
       "      <td>DP</td>\n",
       "      <td>FT</td>\n",
       "      <td>0.900000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000</td>\n",
       "      <td>ahead</td>\n",
       "      <td>no</td>\n",
       "      <td>Other</td>\n",
       "      <td>FF</td>\n",
       "      <td>0.119048</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000</td>\n",
       "      <td>ahead</td>\n",
       "      <td>no</td>\n",
       "      <td>Other</td>\n",
       "      <td>FT</td>\n",
       "      <td>0.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000</td>\n",
       "      <td>ahead</td>\n",
       "      <td>no</td>\n",
       "      <td>Other</td>\n",
       "      <td>SL</td>\n",
       "      <td>0.380952</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57454</th>\n",
       "      <td>1828</td>\n",
       "      <td>first_pitch</td>\n",
       "      <td>no</td>\n",
       "      <td>RISP_DP</td>\n",
       "      <td>SL</td>\n",
       "      <td>0.400000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57455</th>\n",
       "      <td>1829</td>\n",
       "      <td>behind</td>\n",
       "      <td>no</td>\n",
       "      <td>Other</td>\n",
       "      <td>SL</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57456</th>\n",
       "      <td>1829</td>\n",
       "      <td>even</td>\n",
       "      <td>yes</td>\n",
       "      <td>Other</td>\n",
       "      <td>SL</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57457</th>\n",
       "      <td>1829</td>\n",
       "      <td>first_pitch</td>\n",
       "      <td>no</td>\n",
       "      <td>Other</td>\n",
       "      <td>SL</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57458</th>\n",
       "      <td>1829</td>\n",
       "      <td>first_pitch</td>\n",
       "      <td>no</td>\n",
       "      <td>RISP</td>\n",
       "      <td>SL</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>57459 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       pitcherid      p_count p_2strike base_runners pitch_type  \\\n",
       "0           1000        ahead        no           DP         FF   \n",
       "1           1000        ahead        no           DP         FT   \n",
       "2           1000        ahead        no        Other         FF   \n",
       "3           1000        ahead        no        Other         FT   \n",
       "4           1000        ahead        no        Other         SL   \n",
       "...          ...          ...       ...          ...        ...   \n",
       "57454       1828  first_pitch        no      RISP_DP         SL   \n",
       "57455       1829       behind        no        Other         SL   \n",
       "57456       1829         even       yes        Other         SL   \n",
       "57457       1829  first_pitch        no        Other         SL   \n",
       "57458       1829  first_pitch        no         RISP         SL   \n",
       "\n",
       "       sit_pitch_prob  \n",
       "0            0.100000  \n",
       "1            0.900000  \n",
       "2            0.119048  \n",
       "3            0.500000  \n",
       "4            0.380952  \n",
       "...               ...  \n",
       "57454        0.400000  \n",
       "57455        1.000000  \n",
       "57456        1.000000  \n",
       "57457        1.000000  \n",
       "57458        1.000000  \n",
       "\n",
       "[57459 rows x 6 columns]"
      ]
     },
     "execution_count": 611,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pitch_tend_df = df2.groupby(['pitcherid', 'p_count', 'p_2strike', 'base_runners','pitch_type'])['sit_pitch_prob'].mean().reset_index()\n",
    "pitch_tend_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 612,
   "id": "285290e5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>pitch_type</th>\n",
       "      <th>pitcherid</th>\n",
       "      <th>p_count</th>\n",
       "      <th>p_2strike</th>\n",
       "      <th>base_runners</th>\n",
       "      <th>CB</th>\n",
       "      <th>CH</th>\n",
       "      <th>FF</th>\n",
       "      <th>FT</th>\n",
       "      <th>SL</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>ahead</td>\n",
       "      <td>no</td>\n",
       "      <td>DP</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.100000</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000</td>\n",
       "      <td>ahead</td>\n",
       "      <td>no</td>\n",
       "      <td>Other</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.119048</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.380952</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000</td>\n",
       "      <td>ahead</td>\n",
       "      <td>no</td>\n",
       "      <td>RISP</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.153846</td>\n",
       "      <td>0.538462</td>\n",
       "      <td>0.307692</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000</td>\n",
       "      <td>ahead</td>\n",
       "      <td>no</td>\n",
       "      <td>RISP_DP</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>0.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000</td>\n",
       "      <td>ahead</td>\n",
       "      <td>yes</td>\n",
       "      <td>DP</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.142857</td>\n",
       "      <td>0.571429</td>\n",
       "      <td>0.285714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19996</th>\n",
       "      <td>1828</td>\n",
       "      <td>first_pitch</td>\n",
       "      <td>no</td>\n",
       "      <td>RISP_DP</td>\n",
       "      <td>0.4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.200000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.400000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19997</th>\n",
       "      <td>1829</td>\n",
       "      <td>behind</td>\n",
       "      <td>no</td>\n",
       "      <td>Other</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19998</th>\n",
       "      <td>1829</td>\n",
       "      <td>even</td>\n",
       "      <td>yes</td>\n",
       "      <td>Other</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19999</th>\n",
       "      <td>1829</td>\n",
       "      <td>first_pitch</td>\n",
       "      <td>no</td>\n",
       "      <td>Other</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20000</th>\n",
       "      <td>1829</td>\n",
       "      <td>first_pitch</td>\n",
       "      <td>no</td>\n",
       "      <td>RISP</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>20001 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "pitch_type  pitcherid      p_count p_2strike base_runners   CB  CH        FF  \\\n",
       "0                1000        ahead        no           DP  NaN NaN  0.100000   \n",
       "1                1000        ahead        no        Other  NaN NaN  0.119048   \n",
       "2                1000        ahead        no         RISP  NaN NaN  0.153846   \n",
       "3                1000        ahead        no      RISP_DP  NaN NaN       NaN   \n",
       "4                1000        ahead       yes           DP  NaN NaN  0.142857   \n",
       "...               ...          ...       ...          ...  ...  ..       ...   \n",
       "19996            1828  first_pitch        no      RISP_DP  0.4 NaN  0.200000   \n",
       "19997            1829       behind        no        Other  NaN NaN       NaN   \n",
       "19998            1829         even       yes        Other  NaN NaN       NaN   \n",
       "19999            1829  first_pitch        no        Other  NaN NaN       NaN   \n",
       "20000            1829  first_pitch        no         RISP  NaN NaN       NaN   \n",
       "\n",
       "pitch_type        FT        SL  \n",
       "0           0.900000       NaN  \n",
       "1           0.500000  0.380952  \n",
       "2           0.538462  0.307692  \n",
       "3           0.833333  0.166667  \n",
       "4           0.571429  0.285714  \n",
       "...              ...       ...  \n",
       "19996            NaN  0.400000  \n",
       "19997            NaN  1.000000  \n",
       "19998            NaN  1.000000  \n",
       "19999            NaN  1.000000  \n",
       "20000            NaN  1.000000  \n",
       "\n",
       "[20001 rows x 9 columns]"
      ]
     },
     "execution_count": 612,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pt_df = pitch_tend_df\n",
    "pt_df = pt_df.pivot_table('sit_pitch_prob', ['pitcherid', 'p_count', 'p_2strike', 'base_runners'],'pitch_type').reset_index()\n",
    "pt_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 613,
   "id": "a13941fa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>pitch_type</th>\n",
       "      <th>pitcherid</th>\n",
       "      <th>p_count</th>\n",
       "      <th>p_2strike</th>\n",
       "      <th>base_runners</th>\n",
       "      <th>CB</th>\n",
       "      <th>CH</th>\n",
       "      <th>FF</th>\n",
       "      <th>FT</th>\n",
       "      <th>SL</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>ahead</td>\n",
       "      <td>no</td>\n",
       "      <td>DP</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.100000</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000</td>\n",
       "      <td>ahead</td>\n",
       "      <td>no</td>\n",
       "      <td>Other</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.119048</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.380952</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000</td>\n",
       "      <td>ahead</td>\n",
       "      <td>no</td>\n",
       "      <td>RISP</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.153846</td>\n",
       "      <td>0.538462</td>\n",
       "      <td>0.307692</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000</td>\n",
       "      <td>ahead</td>\n",
       "      <td>no</td>\n",
       "      <td>RISP_DP</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>0.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000</td>\n",
       "      <td>ahead</td>\n",
       "      <td>yes</td>\n",
       "      <td>DP</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.142857</td>\n",
       "      <td>0.571429</td>\n",
       "      <td>0.285714</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "pitch_type  pitcherid p_count p_2strike base_runners   CB   CH        FF  \\\n",
       "0                1000   ahead        no           DP  0.0  0.0  0.100000   \n",
       "1                1000   ahead        no        Other  0.0  0.0  0.119048   \n",
       "2                1000   ahead        no         RISP  0.0  0.0  0.153846   \n",
       "3                1000   ahead        no      RISP_DP  0.0  0.0  0.000000   \n",
       "4                1000   ahead       yes           DP  0.0  0.0  0.142857   \n",
       "\n",
       "pitch_type        FT        SL  \n",
       "0           0.900000  0.000000  \n",
       "1           0.500000  0.380952  \n",
       "2           0.538462  0.307692  \n",
       "3           0.833333  0.166667  \n",
       "4           0.571429  0.285714  "
      ]
     },
     "execution_count": 613,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pt_df['CB'] = pt_df['CB'].fillna(0)\n",
    "pt_df['CH'] = pt_df['CH'].fillna(0)\n",
    "pt_df['FF'] = pt_df['FF'].fillna(0)\n",
    "pt_df['FT'] = pt_df['FT'].fillna(0)\n",
    "pt_df['SL'] = pt_df['SL'].fillna(0)\n",
    "pt_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 614,
   "id": "67a83e81",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>inning</th>\n",
       "      <th>is_bottom</th>\n",
       "      <th>outs_before</th>\n",
       "      <th>is_lhp</th>\n",
       "      <th>is_lhb</th>\n",
       "      <th>bat_score_before</th>\n",
       "      <th>field_score</th>\n",
       "      <th>batterid</th>\n",
       "      <th>pitcherid</th>\n",
       "      <th>cid</th>\n",
       "      <th>p_count</th>\n",
       "      <th>p_2strike</th>\n",
       "      <th>base_runners</th>\n",
       "      <th>CB</th>\n",
       "      <th>CH</th>\n",
       "      <th>FF</th>\n",
       "      <th>FT</th>\n",
       "      <th>SL</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>115</td>\n",
       "      <td>1150</td>\n",
       "      <td>2034</td>\n",
       "      <td>even</td>\n",
       "      <td>no</td>\n",
       "      <td>RISP</td>\n",
       "      <td>0.324324</td>\n",
       "      <td>0.378378</td>\n",
       "      <td>0.135135</td>\n",
       "      <td>0.162162</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>34</td>\n",
       "      <td>1368</td>\n",
       "      <td>2075</td>\n",
       "      <td>ahead</td>\n",
       "      <td>yes</td>\n",
       "      <td>Other</td>\n",
       "      <td>0.352941</td>\n",
       "      <td>0.376471</td>\n",
       "      <td>0.235294</td>\n",
       "      <td>0.023529</td>\n",
       "      <td>0.011765</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>203</td>\n",
       "      <td>1153</td>\n",
       "      <td>2024</td>\n",
       "      <td>ahead</td>\n",
       "      <td>yes</td>\n",
       "      <td>Other</td>\n",
       "      <td>0.264151</td>\n",
       "      <td>0.028302</td>\n",
       "      <td>0.009434</td>\n",
       "      <td>0.301887</td>\n",
       "      <td>0.396226</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>356</td>\n",
       "      <td>1172</td>\n",
       "      <td>2094</td>\n",
       "      <td>ahead</td>\n",
       "      <td>yes</td>\n",
       "      <td>Other</td>\n",
       "      <td>0.642570</td>\n",
       "      <td>0.104418</td>\n",
       "      <td>0.136546</td>\n",
       "      <td>0.108434</td>\n",
       "      <td>0.008032</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>296</td>\n",
       "      <td>1161</td>\n",
       "      <td>2032</td>\n",
       "      <td>ahead</td>\n",
       "      <td>no</td>\n",
       "      <td>RISP_DP</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.166667</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>499995</th>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>196</td>\n",
       "      <td>1003</td>\n",
       "      <td>2001</td>\n",
       "      <td>first_pitch</td>\n",
       "      <td>no</td>\n",
       "      <td>RISP</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.025641</td>\n",
       "      <td>0.051282</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.589744</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>499996</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>245</td>\n",
       "      <td>1540</td>\n",
       "      <td>2041</td>\n",
       "      <td>first_pitch</td>\n",
       "      <td>no</td>\n",
       "      <td>Other</td>\n",
       "      <td>0.075949</td>\n",
       "      <td>0.367089</td>\n",
       "      <td>0.367089</td>\n",
       "      <td>0.037975</td>\n",
       "      <td>0.151899</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>499997</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>32</td>\n",
       "      <td>1578</td>\n",
       "      <td>2041</td>\n",
       "      <td>ahead</td>\n",
       "      <td>no</td>\n",
       "      <td>DP</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>499998</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>538</td>\n",
       "      <td>1696</td>\n",
       "      <td>2039</td>\n",
       "      <td>ahead</td>\n",
       "      <td>no</td>\n",
       "      <td>Other</td>\n",
       "      <td>0.524272</td>\n",
       "      <td>0.048544</td>\n",
       "      <td>0.097087</td>\n",
       "      <td>0.213592</td>\n",
       "      <td>0.116505</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>499999</th>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>74</td>\n",
       "      <td>1497</td>\n",
       "      <td>2097</td>\n",
       "      <td>behind</td>\n",
       "      <td>no</td>\n",
       "      <td>Other</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.055556</td>\n",
       "      <td>0.138889</td>\n",
       "      <td>0.486111</td>\n",
       "      <td>0.319444</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>500000 rows × 18 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        inning  is_bottom  outs_before  is_lhp  is_lhb  bat_score_before  \\\n",
       "0            5          1            1       1       1                 4   \n",
       "1            1          1            0       1       1                 0   \n",
       "2           12          1            1       0       1                 2   \n",
       "3            6          0            0       0       1                 0   \n",
       "4            8          0            1       0       1                 1   \n",
       "...        ...        ...          ...     ...     ...               ...   \n",
       "499995       7          1            1       0       1                 5   \n",
       "499996       3          1            1       1       0                 1   \n",
       "499997       5          0            1       0       0                 4   \n",
       "499998       3          1            1       0       1                 2   \n",
       "499999       6          0            1       0       0                 0   \n",
       "\n",
       "        field_score  batterid  pitcherid   cid      p_count p_2strike  \\\n",
       "0                 1       115       1150  2034         even        no   \n",
       "1                 0        34       1368  2075        ahead       yes   \n",
       "2                 2       203       1153  2024        ahead       yes   \n",
       "3                 0       356       1172  2094        ahead       yes   \n",
       "4                 2       296       1161  2032        ahead        no   \n",
       "...             ...       ...        ...   ...          ...       ...   \n",
       "499995            2       196       1003  2001  first_pitch        no   \n",
       "499996            1       245       1540  2041  first_pitch        no   \n",
       "499997            1        32       1578  2041        ahead        no   \n",
       "499998            2       538       1696  2039        ahead        no   \n",
       "499999            0        74       1497  2097       behind        no   \n",
       "\n",
       "       base_runners        CB        CH        FF        FT        SL  \n",
       "0              RISP  0.324324  0.378378  0.135135  0.162162  0.000000  \n",
       "1             Other  0.352941  0.376471  0.235294  0.023529  0.011765  \n",
       "2             Other  0.264151  0.028302  0.009434  0.301887  0.396226  \n",
       "3             Other  0.642570  0.104418  0.136546  0.108434  0.008032  \n",
       "4           RISP_DP  0.333333  0.000000  0.166667  0.500000  0.000000  \n",
       "...             ...       ...       ...       ...       ...       ...  \n",
       "499995         RISP  0.000000  0.025641  0.051282  0.333333  0.589744  \n",
       "499996        Other  0.075949  0.367089  0.367089  0.037975  0.151899  \n",
       "499997           DP  0.000000  0.000000  0.000000  0.000000  1.000000  \n",
       "499998        Other  0.524272  0.048544  0.097087  0.213592  0.116505  \n",
       "499999        Other  0.000000  0.055556  0.138889  0.486111  0.319444  \n",
       "\n",
       "[500000 rows x 18 columns]"
      ]
     },
     "execution_count": 614,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "inputs = inputs.merge(pt_df, how='left', on=['pitcherid', 'p_count', 'p_2strike', 'base_runners']).reset_index(drop=True)\n",
    "inputs = inputs.drop(columns={'pitch_type', 'situation_count', 'pitch_type_count', 'sit_pitch_prob'})\n",
    "inputs"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c6c96e0",
   "metadata": {},
   "source": [
    "The final dataframe now has the pitcher tendencies based on the count and base runner situations. The new columns created must be converted into dummy variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 615,
   "id": "6a8a15e4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['inning', 'is_bottom', 'outs_before', 'is_lhp', 'is_lhb',\n",
       "       'bat_score_before', 'field_score', 'batterid', 'pitcherid', 'cid',\n",
       "       'p_count', 'p_2strike', 'base_runners', 'CB', 'CH', 'FF', 'FT', 'SL'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 615,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "inputs.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 616,
   "id": "2f0f9be5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>p_2strike_no</th>\n",
       "      <th>p_2strike_yes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   p_2strike_no  p_2strike_yes\n",
       "0             1              0\n",
       "1             0              1\n",
       "2             0              1\n",
       "3             0              1\n",
       "4             1              0"
      ]
     },
     "execution_count": 616,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "p_2strike_dummy = pd.get_dummies(inputs.p_2strike, prefix=\"p_2strike\")\n",
    "p_2strike_dummy.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 617,
   "id": "3833952b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['inning', 'is_bottom', 'outs_before', 'is_lhp', 'is_lhb',\n",
       "       'bat_score_before', 'field_score', 'batterid', 'pitcherid', 'cid',\n",
       "       'p_count', 'p_2strike', 'base_runners', 'CB', 'CH', 'FF', 'FT', 'SL'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 617,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "inputs.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 618,
   "id": "6adc36b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "inputs = inputs.merge(p_2strike_dummy, how='left', on=inputs.index)\n",
    "inputs = inputs.drop(columns={\"key_0\", 'p_2strike'})\n",
    "\n",
    "p_count_dummy = pd.get_dummies(inputs.p_count, prefix=\"p_count\")\n",
    "inputs = inputs.merge(p_count_dummy, how='left', on=inputs.index)\n",
    "inputs = inputs.drop(columns={\"key_0\", 'p_count'})\n",
    "\n",
    "base_runners_dummy = pd.get_dummies(inputs.base_runners, prefix=\"runners\")\n",
    "inputs = inputs.merge(base_runners_dummy, how='left', on=inputs.index)\n",
    "inputs = inputs.drop(columns={\"key_0\",'base_runners'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 619,
   "id": "8ab0077a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>inning</th>\n",
       "      <th>is_bottom</th>\n",
       "      <th>outs_before</th>\n",
       "      <th>is_lhp</th>\n",
       "      <th>is_lhb</th>\n",
       "      <th>bat_score_before</th>\n",
       "      <th>field_score</th>\n",
       "      <th>batterid</th>\n",
       "      <th>pitcherid</th>\n",
       "      <th>cid</th>\n",
       "      <th>...</th>\n",
       "      <th>p_2strike_no</th>\n",
       "      <th>p_2strike_yes</th>\n",
       "      <th>p_count_ahead</th>\n",
       "      <th>p_count_behind</th>\n",
       "      <th>p_count_even</th>\n",
       "      <th>p_count_first_pitch</th>\n",
       "      <th>runners_DP</th>\n",
       "      <th>runners_Other</th>\n",
       "      <th>runners_RISP</th>\n",
       "      <th>runners_RISP_DP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>115</td>\n",
       "      <td>1150</td>\n",
       "      <td>2034</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>34</td>\n",
       "      <td>1368</td>\n",
       "      <td>2075</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>203</td>\n",
       "      <td>1153</td>\n",
       "      <td>2024</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>356</td>\n",
       "      <td>1172</td>\n",
       "      <td>2094</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>296</td>\n",
       "      <td>1161</td>\n",
       "      <td>2032</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 25 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   inning  is_bottom  outs_before  is_lhp  is_lhb  bat_score_before  \\\n",
       "0       5          1            1       1       1                 4   \n",
       "1       1          1            0       1       1                 0   \n",
       "2      12          1            1       0       1                 2   \n",
       "3       6          0            0       0       1                 0   \n",
       "4       8          0            1       0       1                 1   \n",
       "\n",
       "   field_score  batterid  pitcherid   cid  ...  p_2strike_no  p_2strike_yes  \\\n",
       "0            1       115       1150  2034  ...             1              0   \n",
       "1            0        34       1368  2075  ...             0              1   \n",
       "2            2       203       1153  2024  ...             0              1   \n",
       "3            0       356       1172  2094  ...             0              1   \n",
       "4            2       296       1161  2032  ...             1              0   \n",
       "\n",
       "   p_count_ahead  p_count_behind  p_count_even  p_count_first_pitch  \\\n",
       "0              0               0             1                    0   \n",
       "1              1               0             0                    0   \n",
       "2              1               0             0                    0   \n",
       "3              1               0             0                    0   \n",
       "4              1               0             0                    0   \n",
       "\n",
       "   runners_DP  runners_Other  runners_RISP  runners_RISP_DP  \n",
       "0           0              0             1                0  \n",
       "1           0              1             0                0  \n",
       "2           0              1             0                0  \n",
       "3           0              1             0                0  \n",
       "4           0              0             0                1  \n",
       "\n",
       "[5 rows x 25 columns]"
      ]
     },
     "execution_count": 619,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "inputs.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "07107880",
   "metadata": {},
   "source": [
    "# Data Splitting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 620,
   "id": "e5d4dbad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>inning</th>\n",
       "      <th>is_bottom</th>\n",
       "      <th>outs_before</th>\n",
       "      <th>is_lhp</th>\n",
       "      <th>is_lhb</th>\n",
       "      <th>bat_score_before</th>\n",
       "      <th>field_score</th>\n",
       "      <th>batterid</th>\n",
       "      <th>pitcherid</th>\n",
       "      <th>cid</th>\n",
       "      <th>...</th>\n",
       "      <th>p_2strike_no</th>\n",
       "      <th>p_2strike_yes</th>\n",
       "      <th>p_count_ahead</th>\n",
       "      <th>p_count_behind</th>\n",
       "      <th>p_count_even</th>\n",
       "      <th>p_count_first_pitch</th>\n",
       "      <th>runners_DP</th>\n",
       "      <th>runners_Other</th>\n",
       "      <th>runners_RISP</th>\n",
       "      <th>runners_RISP_DP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>115</td>\n",
       "      <td>1150</td>\n",
       "      <td>2034</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>34</td>\n",
       "      <td>1368</td>\n",
       "      <td>2075</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>203</td>\n",
       "      <td>1153</td>\n",
       "      <td>2024</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>356</td>\n",
       "      <td>1172</td>\n",
       "      <td>2094</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>296</td>\n",
       "      <td>1161</td>\n",
       "      <td>2032</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 25 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   inning  is_bottom  outs_before  is_lhp  is_lhb  bat_score_before  \\\n",
       "0       5          1            1       1       1                 4   \n",
       "1       1          1            0       1       1                 0   \n",
       "2      12          1            1       0       1                 2   \n",
       "3       6          0            0       0       1                 0   \n",
       "4       8          0            1       0       1                 1   \n",
       "\n",
       "   field_score  batterid  pitcherid   cid  ...  p_2strike_no  p_2strike_yes  \\\n",
       "0            1       115       1150  2034  ...             1              0   \n",
       "1            0        34       1368  2075  ...             0              1   \n",
       "2            2       203       1153  2024  ...             0              1   \n",
       "3            0       356       1172  2094  ...             0              1   \n",
       "4            2       296       1161  2032  ...             1              0   \n",
       "\n",
       "   p_count_ahead  p_count_behind  p_count_even  p_count_first_pitch  \\\n",
       "0              0               0             1                    0   \n",
       "1              1               0             0                    0   \n",
       "2              1               0             0                    0   \n",
       "3              1               0             0                    0   \n",
       "4              1               0             0                    0   \n",
       "\n",
       "   runners_DP  runners_Other  runners_RISP  runners_RISP_DP  \n",
       "0           0              0             1                0  \n",
       "1           0              1             0                0  \n",
       "2           0              1             0                0  \n",
       "3           0              1             0                0  \n",
       "4           0              0             0                1  \n",
       "\n",
       "[5 rows x 25 columns]"
      ]
     },
     "execution_count": 620,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "inputs = pd.DataFrame(inputs)\n",
    "inputs.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 621,
   "id": "2a22077f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['inning', 'is_bottom', 'outs_before', 'is_lhp', 'is_lhb',\n",
       "       'bat_score_before', 'field_score', 'batterid', 'pitcherid', 'cid', 'CB',\n",
       "       'CH', 'FF', 'FT', 'SL', 'p_2strike_no', 'p_2strike_yes',\n",
       "       'p_count_ahead', 'p_count_behind', 'p_count_even',\n",
       "       'p_count_first_pitch', 'runners_DP', 'runners_Other', 'runners_RISP',\n",
       "       'runners_RISP_DP'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 621,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "inputs.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 622,
   "id": "2ab05866",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "inning                 category\n",
      "is_bottom              category\n",
      "outs_before            category\n",
      "is_lhp                 category\n",
      "is_lhb                 category\n",
      "bat_score_before          int64\n",
      "field_score               int64\n",
      "batterid               category\n",
      "pitcherid              category\n",
      "cid                    category\n",
      "CB                      float64\n",
      "CH                      float64\n",
      "FF                      float64\n",
      "FT                      float64\n",
      "SL                      float64\n",
      "p_2strike_no              uint8\n",
      "p_2strike_yes             uint8\n",
      "p_count_ahead             uint8\n",
      "p_count_behind            uint8\n",
      "p_count_even              uint8\n",
      "p_count_first_pitch       uint8\n",
      "runners_DP                uint8\n",
      "runners_Other             uint8\n",
      "runners_RISP              uint8\n",
      "runners_RISP_DP           uint8\n",
      "dtype: object\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>inning</th>\n",
       "      <th>is_bottom</th>\n",
       "      <th>outs_before</th>\n",
       "      <th>is_lhp</th>\n",
       "      <th>is_lhb</th>\n",
       "      <th>bat_score_before</th>\n",
       "      <th>field_score</th>\n",
       "      <th>batterid</th>\n",
       "      <th>pitcherid</th>\n",
       "      <th>cid</th>\n",
       "      <th>...</th>\n",
       "      <th>p_2strike_no</th>\n",
       "      <th>p_2strike_yes</th>\n",
       "      <th>p_count_ahead</th>\n",
       "      <th>p_count_behind</th>\n",
       "      <th>p_count_even</th>\n",
       "      <th>p_count_first_pitch</th>\n",
       "      <th>runners_DP</th>\n",
       "      <th>runners_Other</th>\n",
       "      <th>runners_RISP</th>\n",
       "      <th>runners_RISP_DP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>115</td>\n",
       "      <td>1150</td>\n",
       "      <td>2034</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>34</td>\n",
       "      <td>1368</td>\n",
       "      <td>2075</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>203</td>\n",
       "      <td>1153</td>\n",
       "      <td>2024</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>356</td>\n",
       "      <td>1172</td>\n",
       "      <td>2094</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>296</td>\n",
       "      <td>1161</td>\n",
       "      <td>2032</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>499995</th>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>196</td>\n",
       "      <td>1003</td>\n",
       "      <td>2001</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>499996</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>245</td>\n",
       "      <td>1540</td>\n",
       "      <td>2041</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>499997</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>32</td>\n",
       "      <td>1578</td>\n",
       "      <td>2041</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>499998</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>538</td>\n",
       "      <td>1696</td>\n",
       "      <td>2039</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>499999</th>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>74</td>\n",
       "      <td>1497</td>\n",
       "      <td>2097</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>500000 rows × 25 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       inning is_bottom outs_before is_lhp is_lhb  bat_score_before  \\\n",
       "0           5         1           1      1      1                 4   \n",
       "1           1         1           0      1      1                 0   \n",
       "2          12         1           1      0      1                 2   \n",
       "3           6         0           0      0      1                 0   \n",
       "4           8         0           1      0      1                 1   \n",
       "...       ...       ...         ...    ...    ...               ...   \n",
       "499995      7         1           1      0      1                 5   \n",
       "499996      3         1           1      1      0                 1   \n",
       "499997      5         0           1      0      0                 4   \n",
       "499998      3         1           1      0      1                 2   \n",
       "499999      6         0           1      0      0                 0   \n",
       "\n",
       "        field_score batterid pitcherid   cid  ...  p_2strike_no  \\\n",
       "0                 1      115      1150  2034  ...             1   \n",
       "1                 0       34      1368  2075  ...             0   \n",
       "2                 2      203      1153  2024  ...             0   \n",
       "3                 0      356      1172  2094  ...             0   \n",
       "4                 2      296      1161  2032  ...             1   \n",
       "...             ...      ...       ...   ...  ...           ...   \n",
       "499995            2      196      1003  2001  ...             1   \n",
       "499996            1      245      1540  2041  ...             1   \n",
       "499997            1       32      1578  2041  ...             1   \n",
       "499998            2      538      1696  2039  ...             1   \n",
       "499999            0       74      1497  2097  ...             1   \n",
       "\n",
       "        p_2strike_yes  p_count_ahead  p_count_behind  p_count_even  \\\n",
       "0                   0              0               0             1   \n",
       "1                   1              1               0             0   \n",
       "2                   1              1               0             0   \n",
       "3                   1              1               0             0   \n",
       "4                   0              1               0             0   \n",
       "...               ...            ...             ...           ...   \n",
       "499995              0              0               0             0   \n",
       "499996              0              0               0             0   \n",
       "499997              0              1               0             0   \n",
       "499998              0              1               0             0   \n",
       "499999              0              0               1             0   \n",
       "\n",
       "        p_count_first_pitch  runners_DP  runners_Other  runners_RISP  \\\n",
       "0                         0           0              0             1   \n",
       "1                         0           0              1             0   \n",
       "2                         0           0              1             0   \n",
       "3                         0           0              1             0   \n",
       "4                         0           0              0             0   \n",
       "...                     ...         ...            ...           ...   \n",
       "499995                    1           0              0             1   \n",
       "499996                    1           0              1             0   \n",
       "499997                    0           1              0             0   \n",
       "499998                    0           0              1             0   \n",
       "499999                    0           0              1             0   \n",
       "\n",
       "        runners_RISP_DP  \n",
       "0                     0  \n",
       "1                     0  \n",
       "2                     0  \n",
       "3                     0  \n",
       "4                     1  \n",
       "...                 ...  \n",
       "499995                0  \n",
       "499996                0  \n",
       "499997                0  \n",
       "499998                0  \n",
       "499999                0  \n",
       "\n",
       "[500000 rows x 25 columns]"
      ]
     },
     "execution_count": 622,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# convert numerical variables to categorical \n",
    "cat_cols = ['inning', 'is_bottom', 'outs_before', 'is_lhp', 'is_lhb', 'batterid', 'pitcherid', 'cid']\n",
    "inputs[cat_cols] = inputs[cat_cols].astype('category')\n",
    "#pd.Categorical(inputs[cat_cols])\n",
    "print(inputs.dtypes)\n",
    "inputs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 623,
   "id": "f795be0d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['inning', 'is_bottom', 'outs_before', 'is_lhp', 'is_lhb',\n",
       "       'bat_score_before', 'field_score', 'batterid', 'pitcherid', 'cid', 'CB',\n",
       "       'CH', 'FF', 'FT', 'SL', 'p_2strike_no', 'p_2strike_yes',\n",
       "       'p_count_ahead', 'p_count_behind', 'p_count_even',\n",
       "       'p_count_first_pitch', 'runners_DP', 'runners_Other', 'runners_RISP',\n",
       "       'runners_RISP_DP'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 623,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "inputs.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 624,
   "id": "1318dec0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>inning</th>\n",
       "      <th>is_bottom</th>\n",
       "      <th>outs_before</th>\n",
       "      <th>is_lhp</th>\n",
       "      <th>is_lhb</th>\n",
       "      <th>bat_score_before</th>\n",
       "      <th>field_score</th>\n",
       "      <th>batterid</th>\n",
       "      <th>pitcherid</th>\n",
       "      <th>cid</th>\n",
       "      <th>...</th>\n",
       "      <th>p_2strike_no</th>\n",
       "      <th>p_2strike_yes</th>\n",
       "      <th>p_count_ahead</th>\n",
       "      <th>p_count_behind</th>\n",
       "      <th>p_count_even</th>\n",
       "      <th>p_count_first_pitch</th>\n",
       "      <th>runners_DP</th>\n",
       "      <th>runners_Other</th>\n",
       "      <th>runners_RISP</th>\n",
       "      <th>runners_RISP_DP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.970143</td>\n",
       "      <td>0.242536</td>\n",
       "      <td>115</td>\n",
       "      <td>1150</td>\n",
       "      <td>2034</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>34</td>\n",
       "      <td>1368</td>\n",
       "      <td>2075</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.707107</td>\n",
       "      <td>0.707107</td>\n",
       "      <td>203</td>\n",
       "      <td>1153</td>\n",
       "      <td>2024</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>356</td>\n",
       "      <td>1172</td>\n",
       "      <td>2094</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.447214</td>\n",
       "      <td>0.894427</td>\n",
       "      <td>296</td>\n",
       "      <td>1161</td>\n",
       "      <td>2032</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 25 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  inning is_bottom outs_before is_lhp is_lhb  bat_score_before  field_score  \\\n",
       "0      5         1           1      1      1          0.970143     0.242536   \n",
       "1      1         1           0      1      1          0.000000     0.000000   \n",
       "2     12         1           1      0      1          0.707107     0.707107   \n",
       "3      6         0           0      0      1          0.000000     0.000000   \n",
       "4      8         0           1      0      1          0.447214     0.894427   \n",
       "\n",
       "  batterid pitcherid   cid  ...  p_2strike_no  p_2strike_yes  p_count_ahead  \\\n",
       "0      115      1150  2034  ...             1              0              0   \n",
       "1       34      1368  2075  ...             0              1              1   \n",
       "2      203      1153  2024  ...             0              1              1   \n",
       "3      356      1172  2094  ...             0              1              1   \n",
       "4      296      1161  2032  ...             1              0              1   \n",
       "\n",
       "   p_count_behind  p_count_even  p_count_first_pitch  runners_DP  \\\n",
       "0               0             1                    0           0   \n",
       "1               0             0                    0           0   \n",
       "2               0             0                    0           0   \n",
       "3               0             0                    0           0   \n",
       "4               0             0                    0           0   \n",
       "\n",
       "   runners_Other  runners_RISP  runners_RISP_DP  \n",
       "0              0             1                0  \n",
       "1              1             0                0  \n",
       "2              1             0                0  \n",
       "3              1             0                0  \n",
       "4              0             0                1  \n",
       "\n",
       "[5 rows x 25 columns]"
      ]
     },
     "execution_count": 624,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn import preprocessing\n",
    "num_cols = ['bat_score_before', 'field_score']\n",
    "inputs[num_cols] = pd.DataFrame(preprocessing.normalize(inputs[num_cols]))\n",
    "#inputs_norm.columns = inputs.columns\n",
    "inputs.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d444ff9c",
   "metadata": {},
   "source": [
    "Convert output to dummy variable to match predicted pitch probabilities"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 625,
   "id": "cd1b6b8b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>true_CB</th>\n",
       "      <th>true_CH</th>\n",
       "      <th>true_FF</th>\n",
       "      <th>true_FT</th>\n",
       "      <th>true_SL</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>499995</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>499996</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>499997</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>499998</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>499999</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>500000 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        true_CB  true_CH  true_FF  true_FT  true_SL\n",
       "0             1        0        0        0        0\n",
       "1             1        0        0        0        0\n",
       "2             1        0        0        0        0\n",
       "3             1        0        0        0        0\n",
       "4             1        0        0        0        0\n",
       "...         ...      ...      ...      ...      ...\n",
       "499995        0        0        0        0        1\n",
       "499996        0        0        0        0        1\n",
       "499997        0        0        0        0        1\n",
       "499998        0        0        0        0        1\n",
       "499999        0        0        0        0        1\n",
       "\n",
       "[500000 rows x 5 columns]"
      ]
     },
     "execution_count": 625,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "output = pd.get_dummies(output, prefix=\"true\")\n",
    "output"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "79665f32",
   "metadata": {},
   "source": [
    "Split data into train and validation data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 626,
   "id": "5086b05f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x_train shape: (400000, 25)\n",
      "y_train shape: (400000, 5)\n",
      "x_val shape: (100000, 25)\n",
      "y val shape: (100000, 5)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# split train and validation\n",
    "x_train, x_val, y_train, y_val = train_test_split(inputs, output, test_size=0.2, shuffle = True, random_state= 3) \n",
    "\n",
    "# check shapes\n",
    "print(\"x_train shape: {}\".format(x_train.shape))\n",
    "print(\"y_train shape: {}\".format(y_train.shape))\n",
    "print(\"x_val shape: {}\".format(x_val.shape))\n",
    "print(\"y val shape: {}\".format(y_val.shape))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b8f742c6",
   "metadata": {},
   "source": [
    "# Modeling"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d093a15",
   "metadata": {},
   "source": [
    "## XGBoost\n",
    "From a previous project I worked on similar to pitch predition, I also used XGBoost and it worked out well.\n",
    "<br>\n",
    "- The first model I decided to use was XGBoost Regression. XGBoost is boosting algorithm that learns off of itself, generating an ensemble of tree models to optimize the loss function. \n",
    "- The [scikit-learn](https://scikit-learn.org/stable/auto_examples/ensemble/plot_gradient_boosting_regression.html) Gradient Boosting regression documentation was used to develop the model."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "21e606b3",
   "metadata": {},
   "source": [
    "### Train Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 627,
   "id": "48479452",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['inning', 'is_bottom', 'outs_before', 'is_lhp', 'is_lhb',\n",
       "       'bat_score_before', 'field_score', 'batterid', 'pitcherid', 'cid', 'CB',\n",
       "       'CH', 'FF', 'FT', 'SL', 'p_2strike_no', 'p_2strike_yes',\n",
       "       'p_count_ahead', 'p_count_behind', 'p_count_even',\n",
       "       'p_count_first_pitch', 'runners_DP', 'runners_Other', 'runners_RISP',\n",
       "       'runners_RISP_DP'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 627,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 628,
   "id": "cfe246c0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4, 4)"
      ]
     },
     "execution_count": 628,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y = ['FF', 'FT', 'FF', 'CU']\n",
    "from sklearn.preprocessing import MultiLabelBinarizer\n",
    "\n",
    "mlb = MultiLabelBinarizer()\n",
    "y = mlb.fit_transform(y)\n",
    "y.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 662,
   "id": "5bf6a9a4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(400000, 5)"
      ]
     },
     "execution_count": 662,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 663,
   "id": "17d5fe6e",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- 338.58043098449707 seconds (fitting) ---\n",
      "Validation Cross-entropy loss: 1.32194\n"
     ]
    }
   ],
   "source": [
    "from sklearn import ensemble\n",
    "from sklearn.inspection import permutation_importance\n",
    "from sklearn.metrics import log_loss\n",
    "from sklearn.multiclass import OneVsRestClassifier\n",
    "from sklearn.multioutput import MultiOutputClassifier\n",
    "\n",
    "# establish parameters\n",
    "params = {\n",
    "    \"n_estimators\": 50,\n",
    "    \"max_depth\": 3,\n",
    "    \"min_samples_split\": 2,\n",
    "    \"learning_rate\": 0.01,\n",
    "}\n",
    "\n",
    "######## time model ############\n",
    "import time\n",
    "start_time = time.time()\n",
    "################################\n",
    "\n",
    "# fit model\n",
    "#reg = MultiOutputClassifier(ensemble.GradientBoostingClassifier(**params)).fit(x_train[0:10], y_train[0:10])\n",
    "reg = OneVsRestClassifier(ensemble.GradientBoostingClassifier(**params)).fit(x_train, y_train)\n",
    "trained_model = reg\n",
    "preds = reg.predict_proba(x_val)\n",
    "######### print timed model ###########\n",
    "print(\"--- %s seconds (fitting) ---\" % (time.time() - start_time))\n",
    "\n",
    "# evaluate model\n",
    "ce = log_loss(y_val, preds)\n",
    "print(\"Validation Cross-entropy loss: {:.5f}\".format(ce))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 664,
   "id": "384ff3a3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AUC:  0.8361755447696462\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import roc_auc_score\n",
    "print('AUC: ', roc_auc_score(y_val,preds,multi_class='ovr'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 665,
   "id": "dc87c2da",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.13313802, 0.20680126, 0.12397682, ..., 0.30400952, 0.12397682,\n",
       "       0.12397682])"
      ]
     },
     "execution_count": 665,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "preds[:, 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 666,
   "id": "3188315d",
   "metadata": {},
   "outputs": [],
   "source": [
    "x,_,_ = roc_curve(y_bin[:,0], preds[:, 0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 667,
   "id": "a512862c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0009741111235997153"
      ]
     },
     "execution_count": 667,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 668,
   "id": "222b0907",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "### ROC CURVE ###\n",
    "# Binarize the output\n",
    "#y_bin = label_binarize(y_test, classes=[0, 1, 2, 3])\n",
    "y_bin=np.array(y_val)\n",
    "n_classes = y_bin.shape[1]\n",
    "\n",
    "from scipy import interp\n",
    "from sklearn.metrics import auc\n",
    "import matplotlib.pyplot as plt\n",
    "from itertools import cycle\n",
    "from matplotlib.pyplot import figure\n",
    "from sklearn.metrics import roc_curve\n",
    "\n",
    "# Compute ROC curve and ROC area for each class\n",
    "fpr = dict()\n",
    "tpr = dict()\n",
    "roc_auc = dict()\n",
    "for i in range(n_classes):\n",
    "    fpr[i], tpr[i], _ = roc_curve(y_bin[:,i], preds[:, i])\n",
    "    roc_auc[i] = auc(fpr[i], tpr[i])\n",
    "lw = 2\n",
    "\n",
    "# Plot all ROC curves\n",
    "figure(figsize=(8, 6), dpi=80)\n",
    "\n",
    "#pitch_class = [\"breaking ball\", \"changeup\", \"fastball\", \"other\"]\n",
    "pitch_class = y_val.columns\n",
    "#colors = cycle([\"aqua\", \"darkorange\", \"cornflowerblue\", \"deeppink\"])\n",
    "for i in range(n_classes):\n",
    "    plt.plot(\n",
    "        fpr[i],\n",
    "        tpr[i],\n",
    "        #color=color,\n",
    "        lw=lw,\n",
    "        label=\"ROC curve: {0} ({1:0.2f})\".format(pitch_class[i], roc_auc[i]),\n",
    "    )\n",
    "\n",
    "plt.plot([0, 1], [0, 1], \"k--\", lw=lw, label=\"No Skill\")\n",
    "plt.xlim([0.0, 1.0])\n",
    "plt.ylim([0.0, 1.05])\n",
    "plt.xlabel(\"False Positive Rate\")\n",
    "plt.ylabel(\"True Positive Rate\")\n",
    "plt.title(\"ROC Area by Pitch Type\")\n",
    "plt.legend(loc=\"lower right\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 669,
   "id": "b02c9549",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import precision_recall_curve\n",
    "### PRECISION-RECALL CURVE ###\n",
    "figure(figsize=(8, 6), dpi=80)\n",
    "precision = dict()\n",
    "recall = dict()\n",
    "for i in range(n_classes):\n",
    "    precision[i], recall[i], _ = precision_recall_curve(y_bin[:, i],\n",
    "                                                        preds[:, i])\n",
    "    plt.plot(recall[i], precision[i], lw=2, label=pitch_class[i])\n",
    "\n",
    "no_skill = len(preds[preds==1]) / len(preds)\n",
    "plt.plot([0, 1], [no_skill, no_skill], \"k--\", lw=lw, label='No Skill')\n",
    "plt.xlabel(\"Recall\")\n",
    "plt.ylabel(\"Precision\")\n",
    "plt.legend(loc=\"best\")\n",
    "plt.title(\"Precision vs. Recall Curve\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 670,
   "id": "736aba61",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.        , 0.        , 0.        , 0.        , 0.00721845,\n",
       "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "       0.2       , 0.19614645, 0.2       , 0.2       , 0.1966351 ,\n",
       "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "       0.        , 0.        , 0.        , 0.        , 0.        ])"
      ]
     },
     "execution_count": 670,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#reg.estimators_[].feature_importances_\n",
    "\n",
    "feat_impts = [] \n",
    "for reg in reg.estimators_:\n",
    "    feat_impts.append(reg.feature_importances_)\n",
    "\n",
    "np.mean(feat_impts, axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 671,
   "id": "9f7a6b57",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#feature_importance = reg.feature_importances_\n",
    "feature_importance = np.mean(feat_impts, axis=0)\n",
    "sorted_idx = np.argsort(feature_importance)\n",
    "pos = np.arange(sorted_idx.shape[0]) + 0.5\n",
    "figure(figsize=(8, 6), dpi=80)\n",
    "plt.barh(pos, feature_importance[sorted_idx], align=\"center\")\n",
    "plt.yticks(pos, np.array(inputs.columns)[sorted_idx])\n",
    "plt.title(\"Feature Importance (MDI)\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b356bba7",
   "metadata": {},
   "source": [
    "# Test Model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d3a5ea2f",
   "metadata": {},
   "source": [
    "I have to read in the test data and add all the features I created."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 672,
   "id": "ac883e50",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"Q2_pitches_test.csv\")\n",
    "inputs = df.loc[:,df.columns]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 673,
   "id": "d84c7de2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>inning</th>\n",
       "      <th>is_bottom</th>\n",
       "      <th>balls</th>\n",
       "      <th>strikes</th>\n",
       "      <th>outs_before</th>\n",
       "      <th>is_lhp</th>\n",
       "      <th>is_lhb</th>\n",
       "      <th>bat_score_before</th>\n",
       "      <th>field_score</th>\n",
       "      <th>basecode_before</th>\n",
       "      <th>batterid</th>\n",
       "      <th>pitcherid</th>\n",
       "      <th>cid</th>\n",
       "      <th>FF</th>\n",
       "      <th>FT</th>\n",
       "      <th>CB</th>\n",
       "      <th>SL</th>\n",
       "      <th>CH</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1000</td>\n",
       "      <td>2000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1001</td>\n",
       "      <td>2001</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1001</td>\n",
       "      <td>2001</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1001</td>\n",
       "      <td>2001</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1001</td>\n",
       "      <td>2001</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   inning  is_bottom  balls  strikes  outs_before  is_lhp  is_lhb  \\\n",
       "0       9          1      0        0            0       0       1   \n",
       "1       9          0      0        0            2       0       0   \n",
       "2       9          0      1        1            1       0       0   \n",
       "3       9          0      0        2            0       0       0   \n",
       "4       9          0      1        2            0       0       0   \n",
       "\n",
       "   bat_score_before  field_score  basecode_before  batterid  pitcherid   cid  \\\n",
       "0                 2            4                0         1       1000  2000   \n",
       "1                 4            2                0         2       1001  2001   \n",
       "2                 4            2                0         3       1001  2001   \n",
       "3                 4            2                0         4       1001  2001   \n",
       "4                 4            2                0         4       1001  2001   \n",
       "\n",
       "   FF  FT  CB  SL  CH  \n",
       "0 NaN NaN NaN NaN NaN  \n",
       "1 NaN NaN NaN NaN NaN  \n",
       "2 NaN NaN NaN NaN NaN  \n",
       "3 NaN NaN NaN NaN NaN  \n",
       "4 NaN NaN NaN NaN NaN  "
      ]
     },
     "execution_count": 673,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 674,
   "id": "6ab5cd81",
   "metadata": {},
   "outputs": [],
   "source": [
    "p_count = []\n",
    "for i in range(len(inputs)):\n",
    "    if ((inputs.balls[i]==0) & (inputs.strikes[i]==0)):\n",
    "        p_count.append(\"first_pitch\")\n",
    "    elif inputs.balls[i] > inputs.strikes[i]:\n",
    "        p_count.append(\"behind\")\n",
    "    elif inputs.balls[i] < inputs.strikes[i]:\n",
    "        p_count.append(\"ahead\")\n",
    "    elif inputs.balls[i] == inputs.strikes[i]:\n",
    "        p_count.append(\"even\")\n",
    "    \n",
    "p_2strike = []\n",
    "for i in range(len(inputs)):\n",
    "    if (inputs.strikes[i]==2):\n",
    "        p_2strike.append(\"yes\")\n",
    "    else: \n",
    "        p_2strike.append(\"no\")\n",
    "        \n",
    "inputs['p_count'] = p_count\n",
    "inputs = inputs.drop(columns={'balls', 'strikes'})\n",
    "inputs['p_2strike'] = p_2strike\n",
    "\n",
    "base_runners = []\n",
    "dp_list = [1,3,5,7]\n",
    "for i in range(len(inputs)):\n",
    "    if ((inputs.basecode_before[i]>=2) & (inputs.basecode_before[i] in dp_list) & (inputs.outs_before[i]<2)):\n",
    "        base_runners.append(\"RISP_DP\")\n",
    "    elif (inputs.basecode_before[i]>=2):\n",
    "        base_runners.append(\"RISP\")\n",
    "    elif ((inputs.basecode_before[i] in dp_list) & (inputs.outs_before[i]<2)):\n",
    "        base_runners.append(\"DP\")\n",
    "    else:\n",
    "        base_runners.append(\"Other\")\n",
    "        \n",
    "inputs['base_runners'] = base_runners\n",
    "inputs = inputs.drop(columns={'basecode_before'})\n",
    "\n",
    "# df2 = inputs\n",
    "# df2['pitch_type'] = output\n",
    "\n",
    "# df2[\"situation_count\"] = df2.groupby(['pitcherid', 'p_count', 'p_2strike', 'base_runners'])['pitch_type'].transform(lambda x: x.count())\n",
    "\n",
    "# df2[\"pitch_type_count\"] = df2.groupby(['pitcherid', 'p_count', 'p_2strike', 'base_runners','pitch_type'])['cid'].transform(lambda x: x.count())\n",
    "\n",
    "# df2[\"sit_pitch_prob\"] = df2.pitch_type_count/df2.situation_count\n",
    "\n",
    "# pitch_tend_df = df2.groupby(['pitcherid', 'p_count', 'p_2strike', 'base_runners','pitch_type'])['sit_pitch_prob'].mean().reset_index()\n",
    "\n",
    "# pt_df = pitch_tend_df\n",
    "# pt_df = pt_df.pivot_table('sit_pitch_prob', ['pitcherid', 'p_count', 'p_2strike', 'base_runners'],'pitch_type').reset_index()\n",
    "\n",
    "# pt_df['CB'] = pt_df['CB'].fillna(0)\n",
    "# pt_df['CH'] = pt_df['CH'].fillna(0)\n",
    "# pt_df['FF'] = pt_df['FF'].fillna(0)\n",
    "# pt_df['FT'] = pt_df['FT'].fillna(0)\n",
    "# pt_df['SL'] = pt_df['SL'].fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 675,
   "id": "a64c7fd3",
   "metadata": {},
   "outputs": [],
   "source": [
    "inputs = inputs.drop(columns={'FF','FT', 'CB', 'SL', 'CH'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 676,
   "id": "58efaeb2",
   "metadata": {},
   "outputs": [],
   "source": [
    "inputs = inputs.merge(pt_df, how='left', on=['pitcherid', 'p_count', 'p_2strike', 'base_runners']).reset_index(drop=True)\n",
    "#inputs = inputs.drop(columns={'pitch_type', 'situation_count', 'pitch_type_count', 'sit_pitch_prob'})\n",
    "\n",
    "p_2strike_dummy = pd.get_dummies(inputs.p_2strike, prefix=\"p_2strike\")\n",
    "inputs = inputs.merge(p_2strike_dummy, how='left', on=inputs.index)\n",
    "inputs = inputs.drop(columns={\"key_0\", 'p_2strike'})\n",
    "\n",
    "p_count_dummy = pd.get_dummies(inputs.p_count, prefix=\"p_count\")\n",
    "inputs = inputs.merge(p_count_dummy, how='left', on=inputs.index)\n",
    "inputs = inputs.drop(columns={\"key_0\", 'p_count'})\n",
    "\n",
    "base_runners_dummy = pd.get_dummies(inputs.base_runners, prefix=\"runners\")\n",
    "inputs = inputs.merge(base_runners_dummy, how='left', on=inputs.index)\n",
    "inputs = inputs.drop(columns={\"key_0\",'base_runners'})"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c247cbc4",
   "metadata": {},
   "source": [
    "Replace NaN values for new pitchers in the test data with the average values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 677,
   "id": "1d2ce13f",
   "metadata": {},
   "outputs": [],
   "source": [
    "inputs = inputs.fillna(inputs.mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d67419d",
   "metadata": {},
   "source": [
    "## Get Test Probabilities"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 678,
   "id": "1d351d73",
   "metadata": {},
   "outputs": [],
   "source": [
    "cat_cols = ['inning', 'is_bottom', 'outs_before', 'is_lhp', 'is_lhb', 'batterid', 'pitcherid', 'cid']\n",
    "inputs[cat_cols] = inputs[cat_cols].astype('category')\n",
    "num_cols = ['bat_score_before', 'field_score']\n",
    "inputs[num_cols] = pd.DataFrame(preprocessing.normalize(inputs[num_cols]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 679,
   "id": "b6ac5cbc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['inning', 'is_bottom', 'outs_before', 'is_lhp', 'is_lhb',\n",
       "       'bat_score_before', 'field_score', 'batterid', 'pitcherid', 'cid', 'CB',\n",
       "       'CH', 'FF', 'FT', 'SL', 'p_2strike_no', 'p_2strike_yes',\n",
       "       'p_count_ahead', 'p_count_behind', 'p_count_even',\n",
       "       'p_count_first_pitch', 'runners_DP', 'runners_Other', 'runners_RISP',\n",
       "       'runners_RISP_DP'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 679,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_inputs=inputs\n",
    "test_inputs.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 680,
   "id": "52b09f19",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>inning</th>\n",
       "      <th>is_bottom</th>\n",
       "      <th>outs_before</th>\n",
       "      <th>is_lhp</th>\n",
       "      <th>is_lhb</th>\n",
       "      <th>bat_score_before</th>\n",
       "      <th>field_score</th>\n",
       "      <th>batterid</th>\n",
       "      <th>pitcherid</th>\n",
       "      <th>cid</th>\n",
       "      <th>...</th>\n",
       "      <th>p_2strike_no</th>\n",
       "      <th>p_2strike_yes</th>\n",
       "      <th>p_count_ahead</th>\n",
       "      <th>p_count_behind</th>\n",
       "      <th>p_count_even</th>\n",
       "      <th>p_count_first_pitch</th>\n",
       "      <th>runners_DP</th>\n",
       "      <th>runners_Other</th>\n",
       "      <th>runners_RISP</th>\n",
       "      <th>runners_RISP_DP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.447214</td>\n",
       "      <td>0.894427</td>\n",
       "      <td>1</td>\n",
       "      <td>1000</td>\n",
       "      <td>2000</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.894427</td>\n",
       "      <td>0.447214</td>\n",
       "      <td>2</td>\n",
       "      <td>1001</td>\n",
       "      <td>2001</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.894427</td>\n",
       "      <td>0.447214</td>\n",
       "      <td>3</td>\n",
       "      <td>1001</td>\n",
       "      <td>2001</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.894427</td>\n",
       "      <td>0.447214</td>\n",
       "      <td>4</td>\n",
       "      <td>1001</td>\n",
       "      <td>2001</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.894427</td>\n",
       "      <td>0.447214</td>\n",
       "      <td>4</td>\n",
       "      <td>1001</td>\n",
       "      <td>2001</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>160301</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>367</td>\n",
       "      <td>1506</td>\n",
       "      <td>2060</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>160302</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>157</td>\n",
       "      <td>1506</td>\n",
       "      <td>2060</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>160303</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>159</td>\n",
       "      <td>1506</td>\n",
       "      <td>2060</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>160304</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>159</td>\n",
       "      <td>1506</td>\n",
       "      <td>2060</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>160305</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>159</td>\n",
       "      <td>1506</td>\n",
       "      <td>2060</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>160306 rows × 25 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       inning is_bottom outs_before is_lhp is_lhb  bat_score_before  \\\n",
       "0           9         1           0      0      1          0.447214   \n",
       "1           9         0           2      0      0          0.894427   \n",
       "2           9         0           1      0      0          0.894427   \n",
       "3           9         0           0      0      0          0.894427   \n",
       "4           9         0           0      0      0          0.894427   \n",
       "...       ...       ...         ...    ...    ...               ...   \n",
       "160301      1         0           0      0      1          0.000000   \n",
       "160302      1         0           0      0      0          0.000000   \n",
       "160303      1         0           0      0      1          0.000000   \n",
       "160304      1         0           0      0      1          0.000000   \n",
       "160305      1         0           0      0      1          0.000000   \n",
       "\n",
       "        field_score batterid pitcherid   cid  ...  p_2strike_no  \\\n",
       "0          0.894427        1      1000  2000  ...             1   \n",
       "1          0.447214        2      1001  2001  ...             1   \n",
       "2          0.447214        3      1001  2001  ...             1   \n",
       "3          0.447214        4      1001  2001  ...             0   \n",
       "4          0.447214        4      1001  2001  ...             0   \n",
       "...             ...      ...       ...   ...  ...           ...   \n",
       "160301     0.000000      367      1506  2060  ...             1   \n",
       "160302     0.000000      157      1506  2060  ...             1   \n",
       "160303     0.000000      159      1506  2060  ...             0   \n",
       "160304     0.000000      159      1506  2060  ...             0   \n",
       "160305     0.000000      159      1506  2060  ...             0   \n",
       "\n",
       "        p_2strike_yes  p_count_ahead  p_count_behind  p_count_even  \\\n",
       "0                   0              0               0             0   \n",
       "1                   0              0               0             0   \n",
       "2                   0              0               0             1   \n",
       "3                   1              1               0             0   \n",
       "4                   1              1               0             0   \n",
       "...               ...            ...             ...           ...   \n",
       "160301              0              1               0             0   \n",
       "160302              0              1               0             0   \n",
       "160303              1              0               1             0   \n",
       "160304              1              0               1             0   \n",
       "160305              1              0               1             0   \n",
       "\n",
       "        p_count_first_pitch  runners_DP  runners_Other  runners_RISP  \\\n",
       "0                         1           0              1             0   \n",
       "1                         1           0              1             0   \n",
       "2                         0           0              1             0   \n",
       "3                         0           0              1             0   \n",
       "4                         0           0              1             0   \n",
       "...                     ...         ...            ...           ...   \n",
       "160301                    0           1              0             0   \n",
       "160302                    0           0              0             0   \n",
       "160303                    0           0              1             0   \n",
       "160304                    0           0              1             0   \n",
       "160305                    0           0              1             0   \n",
       "\n",
       "        runners_RISP_DP  \n",
       "0                     0  \n",
       "1                     0  \n",
       "2                     0  \n",
       "3                     0  \n",
       "4                     0  \n",
       "...                 ...  \n",
       "160301                0  \n",
       "160302                1  \n",
       "160303                0  \n",
       "160304                0  \n",
       "160305                0  \n",
       "\n",
       "[160306 rows x 25 columns]"
      ]
     },
     "execution_count": 680,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_inputs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 681,
   "id": "6fda3b05",
   "metadata": {},
   "outputs": [],
   "source": [
    "test_preds = trained_model.predict_proba(test_inputs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 682,
   "id": "2dcf8079",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.12397682, 0.12426529, 0.18340497, 0.4172478 , 0.15576002],\n",
       "       [0.12397682, 0.31189011, 0.18340497, 0.14834809, 0.26629494],\n",
       "       [0.12397682, 0.31189011, 0.23159138, 0.14210755, 0.21014231],\n",
       "       ...,\n",
       "       [0.29100383, 0.1779336 , 0.26368389, 0.14277978, 0.1323037 ],\n",
       "       [0.29100383, 0.1779336 , 0.26368389, 0.14277978, 0.1323037 ],\n",
       "       [0.29100383, 0.1779336 , 0.26368389, 0.14277978, 0.1323037 ]])"
      ]
     },
     "execution_count": 682,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_preds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 684,
   "id": "35a5aa86",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['true_CB', 'true_CH', 'true_FF', 'true_FT', 'true_SL'], dtype='object')\n",
      "Index(['true_CB', 'true_CH', 'true_FF', 'true_FT', 'true_SL'], dtype='object')\n"
     ]
    }
   ],
   "source": [
    "print(y_train.columns)\n",
    "print(y_val.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 686,
   "id": "a257f875",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>inning</th>\n",
       "      <th>is_bottom</th>\n",
       "      <th>balls</th>\n",
       "      <th>strikes</th>\n",
       "      <th>outs_before</th>\n",
       "      <th>is_lhp</th>\n",
       "      <th>is_lhb</th>\n",
       "      <th>bat_score_before</th>\n",
       "      <th>field_score</th>\n",
       "      <th>basecode_before</th>\n",
       "      <th>batterid</th>\n",
       "      <th>pitcherid</th>\n",
       "      <th>cid</th>\n",
       "      <th>FF</th>\n",
       "      <th>FT</th>\n",
       "      <th>CB</th>\n",
       "      <th>SL</th>\n",
       "      <th>CH</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1000</td>\n",
       "      <td>2000</td>\n",
       "      <td>0.183405</td>\n",
       "      <td>0.417248</td>\n",
       "      <td>0.123977</td>\n",
       "      <td>0.155760</td>\n",
       "      <td>0.124265</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1001</td>\n",
       "      <td>2001</td>\n",
       "      <td>0.183405</td>\n",
       "      <td>0.148348</td>\n",
       "      <td>0.123977</td>\n",
       "      <td>0.266295</td>\n",
       "      <td>0.311890</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1001</td>\n",
       "      <td>2001</td>\n",
       "      <td>0.231591</td>\n",
       "      <td>0.142108</td>\n",
       "      <td>0.123977</td>\n",
       "      <td>0.210142</td>\n",
       "      <td>0.311890</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1001</td>\n",
       "      <td>2001</td>\n",
       "      <td>0.277344</td>\n",
       "      <td>0.148348</td>\n",
       "      <td>0.123977</td>\n",
       "      <td>0.210142</td>\n",
       "      <td>0.240789</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1001</td>\n",
       "      <td>2001</td>\n",
       "      <td>0.277344</td>\n",
       "      <td>0.148348</td>\n",
       "      <td>0.123977</td>\n",
       "      <td>0.210142</td>\n",
       "      <td>0.240789</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   inning  is_bottom  balls  strikes  outs_before  is_lhp  is_lhb  \\\n",
       "0       9          1      0        0            0       0       1   \n",
       "1       9          0      0        0            2       0       0   \n",
       "2       9          0      1        1            1       0       0   \n",
       "3       9          0      0        2            0       0       0   \n",
       "4       9          0      1        2            0       0       0   \n",
       "\n",
       "   bat_score_before  field_score  basecode_before  batterid  pitcherid   cid  \\\n",
       "0                 2            4                0         1       1000  2000   \n",
       "1                 4            2                0         2       1001  2001   \n",
       "2                 4            2                0         3       1001  2001   \n",
       "3                 4            2                0         4       1001  2001   \n",
       "4                 4            2                0         4       1001  2001   \n",
       "\n",
       "         FF        FT        CB        SL        CH  \n",
       "0  0.183405  0.417248  0.123977  0.155760  0.124265  \n",
       "1  0.183405  0.148348  0.123977  0.266295  0.311890  \n",
       "2  0.231591  0.142108  0.123977  0.210142  0.311890  \n",
       "3  0.277344  0.148348  0.123977  0.210142  0.240789  \n",
       "4  0.277344  0.148348  0.123977  0.210142  0.240789  "
      ]
     },
     "execution_count": 686,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"Q2_pitches_test.csv\")\n",
    "df.CB=test_preds[:,0]\n",
    "df.CH=test_preds[:,1]\n",
    "df.FF=test_preds[:,2]\n",
    "df.FT=test_preds[:,3]\n",
    "df.SL=test_preds[:,4]\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 687,
   "id": "c286cd9f",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.to_csv(\"Q2_pitches_test-COMPLETED.CSV\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
